{
    "소프트웨어공학과": {
        "nodes": [
            {
                "course_id": 394,
                "course_name": "운영체제",
                "department": "소프트웨어공학과",
                "student_grade": 3,
                "semester": 1,
                "description": "운영체제,컴퓨터 운영체제의 기본원리를 이해하고, 이를 활용하는 능력을 갖도록 한다. 운영체제의 기본 요소들인 프로세스 관리, 가상 메모리, 파일 관리 등을 다루며, 특히 운영체제의 중요성 또는 구조를 이해하거나 활용할 수 있는 이론적인 방법과 해석적 구조를 이해한다. ",
                "prerequisites": "컴퓨터구조"
            },
            {
                "course_id": 2561,
                "course_name": "소프트웨어시스템분석및설계",
                "department": "소프트웨어공학과",
                "student_grade": 3,
                "semester": 2,
                "description": "소프트웨어시스템분석및설계,소프트웨어 시스템의 개발은 분석, 설계, 구현 3가지 단계의 반복적이고 점진적인 과정을 통해 이루어 진다. 본 강좌에서는 시스템을 분석하고 설계하는데 고려되어야 하는 이슈들과 함께 분석 및 설계를 위하여 사용되는 방법론들과 기법들에 대하여 다룬다. 특히 UML(Unified Modeling Language)을 이용한 객체 지향 소프트웨어 개발과 관련된 사항을 중점적으로 다루며, 실제 사례를 통한 학습을 통하여 시스템 전체에 대한 분석 및 설계가 가능한 인력 양성을 목표로 한다. ",
                "prerequisites": "소프트웨어공학개론, 소프트웨어개발프로세스"
            },
            {
                "course_id": 3154,
                "course_name": "C++프로그래밍",
                "department": "소프트웨어공학과",
                "student_grade": 1,
                "semester": 2,
                "description": "C언어의 응용, C++의 기본적인 지식에서 부터 객체지향언어의 전반적인 내용을 숙지하고(특히, 캡슐화, 정보은닉, 다형성, 상속과 같은 객체 지향의 핵심적인 개념을 완벽하게 이해하고) 충분한 프로그래밍 실습을 통하여 객체지향 언어로서의 응용력을 기른다.  객체지향 언어(MFC, JAVA, .Net 등)를 배우기 위한 기본을 다지며, Object 중심의 프로그래밍 기법에 대해 익힌다.\n\n(사전 이해도에 따라 강의 내용과 방향이 조정될 수 있음.)",
                "prerequisites": "C언어"
            },
            {
                "course_id": 814,
                "course_name": "자료구조",
                "department": "소프트웨어공학과",
                "student_grade": 2,
                "semester": 1,
                "description": "자료구조,소프트웨어 시스템을 설계 구현하는데 필요한 여러 자료구조의 기본 개념과 이를 효율적으로 처리하는 방법에 대해 학습한다. 학습의 이해를 높이기 위해 C 언어를 이용한 실습 및 과제를 활용한다. 강의, 실습 및 과제를 통하여 리스트, 스택, 큐, 트리, 그래프, 정렬, 해싱, 탐색 등의 기본적인 자료구조의 이해, 설계 및 분석 방법을 숙지하여 실무에 적용할 수 있는 프로그래밍 능력 함양을 목표로 한다. ",
                "prerequisites": "C++프로그래밍"
            }
        ],
        "edges": [
            {
                "from": 3154,
                "to": 2561
            }
        ]
    },
    "컴퓨터인공지능학부": {
        "nodes": [
            {
                "course_id": 1041,
                "course_name": "운영체제",
                "department": "컴퓨터인공지능학부",
                "student_grade": 3,
                "semester": 1,
                "description": "운영체제,운영체제의 구조 및 프로세스 관리에 대한 전반적인 내용을 학습 ",
                "prerequisites": "리눅스프로그래밍, 컴퓨터구조"
            },
            {
                "course_id": 2594,
                "course_name": "컴퓨터구조",
                "department": "컴퓨터인공지능학부",
                "student_grade": 2,
                "semester": 2,
                "description": "해당 강의는 프로세서, 메모리 등 컴퓨터 시스템을 구성하는 주요 요소 및 동작 원리를 이해하고, 동작 과정에서 거치는 소프트웨어/하드웨어 간 상호작용에 대한 이해를 목적으로 한다.\n(전반부) 컴퓨터 시스템을 구성하는 주요 구성요소, 성능 및, 컴퓨터를 구동하는 기본적인 연산,로직 구조 및 이를 활용한 인스트럭션 동작에 대해 이해한다.\n(후반부) 전반부의 내용을 바탕으로 컴퓨터 내의 연산 프로세서, 메모리의 동작을 분석하거나, 프로세서 혹은 클러스터 컴퓨팅에서의 병렬 동작을 이해한다.\n",
                "prerequisites": "논리설계 "
            },
            {
                "course_id": 1554,
                "course_name": "논리설계",
                "department": "컴퓨터인공지능학부",
                "student_grade": 2,
                "semester": 1,
                "description": "해당 강의는 컴퓨터 시스템을 구성하는 디지털 회로의 기초 구성을 이해한다. 이를 바탕으로, 디지털 회로의 최적화 알고리즘, 주요 구성을 학습한다, 프로그래밍 언어를 통해 목적에 맞는 디지털 회로를 설계하는 방법을 알아본다.\n",
                "prerequisites": ""
            },
            {
                "course_id": 2819,
                "course_name": "소프트웨어공학",
                "department": "컴퓨터인공지능학부",
                "student_grade": 3,
                "semester": 2,
                "description": "소프트웨어공학,1. 소프트웨어 개발 주기 이해: 소프트웨어 개발 주기와 공학적 접근 방법을 이해하고, 요구사항 분석, 설계, 구현, 테스트, 배포 및 유지보수 단계를 포괄적으로 학습한다.\n2. 소프트웨어 요구사항 관리: 요구사항의 수집, 분석, 문서화, 추적 및 관리 기법을 학습하여 효율적이고 명확한 요구사항 정의의 중요성을 이해하고 실제 프로젝트에 적용한다.\n3. 소프트웨어 설계 기술: 소프트웨어 설계의 다양한 기법과 원칙에 대해 학습하고, 소프트웨어 아키텍처의 중요성과 올바른 설계 결정이 전체 개발 프로세스에 미치는 영향을 이해한다.\n4. 소프트웨어 테스트: 테스트 기법, 테스트 케이스 작성, 오류 추적 및 수정 등 소프트웨어 품질 향상을 위한 테스트 기법과 전략을 배우고, 실제 프로젝트에서 테스트 수행 능력을 향상시킨다.\n5. 소프트웨어 프로젝트 관리: 프로젝트 계획, 일정 관리, 리스크 관리, 팀 협업 등 소프트웨어 프로젝트 관리 기술을 습득하여 프로젝트의 성공적인 완수를 목표로 한다.\n6. 실무적인 소프트웨어 프로젝트 경험: 수강생들은 팀 프로젝트를 통해 실제 소프트웨어 개발 경험을 쌓고, 현업에서 요구되는 협업 능력과 문제 해결 능력을 향상시킨다. ",
                "prerequisites": "자료구조"
            },
            {
                "course_id": 2402,
                "course_name": "객체지향프로그래밍",
                "department": "컴퓨터인공지능학부",
                "student_grade": 2,
                "semester": 1,
                "description": "객체 지향 프로그래밍에 대한 개요를 배우고 JAVA 언어를 기반으로 하여 객체 지향 프로그램 개발을 수행한다.",
                "prerequisites": "컴퓨터과학과코딩, C언어기초"
            },
            {
                "course_id": 818,
                "course_name": "리눅스프로그래밍",
                "department": "컴퓨터인공지능학부",
                "student_grade": 2,
                "semester": 1,
                "description": "리눅스프로그래밍,리눅스 시스템에서의 프로그래밍을 학습한다. 본 수업의 목표는 다음과 같다. \n1) 리눅스 환경에서 CLI 사용 능력 배양, 2) 리눅스 OS 사용 능력 및 시스템 이해, 3) 리눅스 환경에서의 네트워크 서비스 관리 ",
                "prerequisites": ""
            }
        ],
        "edges": [
            {
                "from": 2594,
                "to": 1041
            },
            {
                "from": 1554,
                "to": 2594
            },
            {
                "from": 2402,
                "to": 2819
            }
        ]
    }
}