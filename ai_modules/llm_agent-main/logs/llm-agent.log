2025-09-28 03:26:07 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:07 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:07 - main - INFO - ==================================================
2025-09-28 03:26:09 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:09 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:09 - main - INFO - ==================================================
2025-09-28 03:26:11 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:11 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:11 - main - INFO - ==================================================
2025-09-28 03:26:13 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:13 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:13 - main - INFO - ==================================================
2025-09-28 03:26:16 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:16 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:16 - main - INFO - ==================================================
2025-09-28 03:26:20 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:20 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:20 - main - INFO - ==================================================
2025-09-28 03:26:25 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:25 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:25 - main - INFO - ==================================================
2025-09-28 03:26:33 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:33 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:33 - main - INFO - ==================================================
2025-09-28 03:26:48 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:26:48 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:26:48 - main - INFO - ==================================================
2025-09-28 03:27:15 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:27:15 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:27:15 - main - INFO - ==================================================
2025-09-28 03:28:08 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:08 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:08 - main - INFO - ==================================================
2025-09-28 03:28:23 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:23 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:23 - main - INFO - ==================================================
2025-09-28 03:28:25 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:25 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:25 - main - INFO - ==================================================
2025-09-28 03:28:27 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:27 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:27 - main - INFO - ==================================================
2025-09-28 03:28:29 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:29 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:29 - main - INFO - ==================================================
2025-09-28 03:28:32 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:32 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:32 - main - INFO - ==================================================
2025-09-28 03:28:35 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:35 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:35 - main - INFO - ==================================================
2025-09-28 03:28:40 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:40 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:40 - main - INFO - ==================================================
2025-09-28 03:28:49 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:28:49 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:28:49 - main - INFO - ==================================================
2025-09-28 03:29:03 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:29:03 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:29:03 - main - INFO - ==================================================
2025-09-28 03:29:31 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:29:31 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:29:31 - main - INFO - ==================================================
2025-09-28 03:29:44 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:29:44 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:29:44 - main - INFO - ==================================================
2025-09-28 03:29:44 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:29:44 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:29:44 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:29:44 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:29:44 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:29:44 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:29:44 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:29:44 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:29:44 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:29:44 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:29:44 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:31:51 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:31:51 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요, AI 멘토입니다!...
2025-09-28 03:31:51 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요, AI 멘토입니다!...'
2025-09-28 03:31:51 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:31:51 - service.nodes.base_node - ERROR - ❌ Router 노드 실패 (0.00초): 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:31:51 - service.core.mentor_service - ERROR - ❌ 처리 실패: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:31:51 - controller.agentController - ERROR - AI 멘토 서비스 오류: 처리 중 오류: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:34:25 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:34:25 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:34:25 - main - INFO - ==================================================
2025-09-28 03:34:25 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:34:25 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:34:25 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:34:25 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:34:25 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:34:25 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:34:25 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:34:25 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:34:25 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:34:25 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:34:25 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:35:12 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:35:12 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요, AI 멘토입니다!...
2025-09-28 03:35:12 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요, AI 멘토입니다!...'
2025-09-28 03:35:12 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:35:12 - service.nodes.base_node - ERROR - ❌ Router 노드 실패 (0.00초): 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:35:12 - service.core.mentor_service - ERROR - ❌ 처리 실패: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:35:12 - controller.agentController - ERROR - AI 멘토 서비스 오류: 처리 중 오류: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:35:20 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:35:20 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:35:20 - main - INFO - ==================================================
2025-09-28 03:35:20 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:35:20 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:35:20 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:35:20 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:35:20 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:35:20 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:35:20 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:35:20 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:35:20 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:35:20 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:35:20 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:35:57 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:35:57 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:35:57 - main - INFO - ==================================================
2025-09-28 03:35:57 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:35:57 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:35:57 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:35:57 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:35:57 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:35:57 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:35:57 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:35:57 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:35:57 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:35:57 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:35:57 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:36:42 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:36:42 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:36:42 - main - INFO - ==================================================
2025-09-28 03:36:42 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:36:42 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:36:42 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:36:42 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:36:42 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:36:42 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:36:42 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:36:42 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:36:42 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:36:42 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:36:42 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:37:07 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:37:07 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요!...
2025-09-28 03:37:07 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요!...'
2025-09-28 03:37:07 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:37:07 - service.nodes.base_node - ERROR - ❌ Router 노드 실패 (0.00초): 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:37:07 - service.core.mentor_service - ERROR - ❌ 처리 실패: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:37:07 - controller.agentController - ERROR - AI 멘토 서비스 오류: 처리 중 오류: 'LlmClient' object has no attribute 'chat_completion'
2025-09-28 03:37:28 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:37:28 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:37:28 - main - INFO - ==================================================
2025-09-28 03:37:28 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:37:28 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:37:28 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:37:28 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:37:28 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:37:28 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:37:28 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:37:28 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:37:28 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:37:28 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:37:28 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:37:59 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:37:59 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요!...
2025-09-28 03:37:59 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요!...'
2025-09-28 03:37:59 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:37:59 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-629e0261-a6cb-4b46-9f3a-3f73cbddd336', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n안녕하세요!\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:37:59 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:37:59 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 03:37:59 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fa86a448a50>
2025-09-28 03:37:59 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fa86aac3bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 03:37:59 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fa86a447dd0>
2025-09-28 03:37:59 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:37:59 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:37:59 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:37:59 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:37:59 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:38:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2710'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3263'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998122'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_671c31276c534f26b93a46ab6ee4142d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=uc00NBdDVWM2wDRW0fniEnyDJT.YhkDkC.9Mzwk9P8c-1758998283-1.0.1.1-zGvHQcIjWGcy.RKO5WwHlnu2gZXiW64Pj.MpLEoZfI5IZ9da90YsTcuqrdy0303fyDaHZ5XlmfOZM0iyxnk8sB0PcOhPdsBrOwOweq7pTx8; path=/; expires=Sat, 27-Sep-25 19:08:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=dvIT4s0SJNjcITW8UA2MKvN8WBusUYX36WIauKM06zc-1758998283453-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d1d8ef827d1f1-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:38:03 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:38:03 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 18:38:03 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2710'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3263'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998122'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_671c31276c534f26b93a46ab6ee4142d'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=uc00NBdDVWM2wDRW0fniEnyDJT.YhkDkC.9Mzwk9P8c-1758998283-1.0.1.1-zGvHQcIjWGcy.RKO5WwHlnu2gZXiW64Pj.MpLEoZfI5IZ9da90YsTcuqrdy0303fyDaHZ5XlmfOZM0iyxnk8sB0PcOhPdsBrOwOweq7pTx8; path=/; expires=Sat, 27-Sep-25 19:08:03 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=dvIT4s0SJNjcITW8UA2MKvN8WBusUYX36WIauKM06zc-1758998283453-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d1d8ef827d1f1-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 03:38:03 - openai._base_client - DEBUG - request_id: req_671c31276c534f26b93a46ab6ee4142d
2025-09-28 03:38:03 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 681자 텍스트
2025-09-28 03:38:03 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 669자, 7개 필드
2025-09-28 03:38:03 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:38:03 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 03:38:03 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 03:38:03 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '안녕하세요!'
2025-09-28 03:38:03 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '안녕하세요!

[확장정보] 배경정보: The user is initiating a conversation, possibly seeking information related to Jeonbuk National University. | 관련키워드: Jeonbuk National University, query expansion, AI Mentor'
2025-09-28 03:38:03 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-357c277f-dcb9-4e73-a01b-07a3322e2370', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:38:03 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:38:03 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:38:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'11601'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'11750'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_4107c0d09b4743ffbf4ae8cf46e68e4a'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d1da7b8f2d1f1-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:38:17 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:38:17 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 18:38:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '11601', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '11750', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_4107c0d09b4743ffbf4ae8cf46e68e4a', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d1da7b8f2d1f1-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 03:38:17 - openai._base_client - DEBUG - request_id: req_4107c0d09b4743ffbf4ae8cf46e68e4a
2025-09-28 03:38:17 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1487자 텍스트
2025-09-28 03:38:17 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 03:38:17 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:38:17 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 03:38:17 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 03:38:17 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 03:38:17 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 03:38:17 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (18.52초)
2025-09-28 03:38:17 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 03:38:17 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '안녕하세요!...'
2025-09-28 03:38:17 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:38:17 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa86a270690>
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:38:17 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:38:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:38:18 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 404 Not Found"
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:38:18 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 03:38:18 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:38:18 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa86a2b6dd0>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:38:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:38:18 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:38:18 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 03:38:18 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 03:38:18 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa86a2d4290>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 18:38:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 03:38:18 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 500 Internal Server Error"
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:38:18 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:38:18 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 03:38:18 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 03:38:18 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 03:38:18 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (0.01초)
2025-09-28 03:38:18 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 03:38:18 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 03:38:18 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 03:38:18 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 03:38:18 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 03:38:18 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 03:41:14 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:41:14 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:41:14 - main - INFO - ==================================================
2025-09-28 03:41:14 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:41:14 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:41:14 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:41:14 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:41:14 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:41:14 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:41:14 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:41:14 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:41:14 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:41:14 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:41:14 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:41:50 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:41:50 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요!...
2025-09-28 03:41:50 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요!...'
2025-09-28 03:41:50 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:41:50 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-6c2de0d2-9b54-46f3-ad2e-569c466db7f0', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n안녕하세요!\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:41:50 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:41:50 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 03:41:50 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f542eb7b210>
2025-09-28 03:41:50 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f542f237bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 03:41:50 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f5434c94850>
2025-09-28 03:41:50 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:41:50 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:41:50 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:41:50 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:41:50 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:41:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2014'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2204'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998122'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_d23b241544944b0e8a0c5a7c89044594'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Aty_j2oIRCiDmn6onbXQjc7TTyO6dzgfiaXEIdouvbA-1758998513-1.0.1.1-zR2dfKW4UEvEg0IMWSdSPdCeDnYk1LZgKQFHvyac9yiLweS8ZRX9DKq1ONEegZkJiYD._ZZhaeFE4d29uB0iNZyrfsPN8uO.SJ9a9PFihtc; path=/; expires=Sat, 27-Sep-25 19:11:53 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=cwTsDbeWvMCKLemej_TW.PVF8WY5UJof.4jRmV4CzbM-1758998513742-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d233589f9ea33-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:41:53 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:41:53 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 18:41:53 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2014'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2204'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998122'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_d23b241544944b0e8a0c5a7c89044594'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Aty_j2oIRCiDmn6onbXQjc7TTyO6dzgfiaXEIdouvbA-1758998513-1.0.1.1-zR2dfKW4UEvEg0IMWSdSPdCeDnYk1LZgKQFHvyac9yiLweS8ZRX9DKq1ONEegZkJiYD._ZZhaeFE4d29uB0iNZyrfsPN8uO.SJ9a9PFihtc; path=/; expires=Sat, 27-Sep-25 19:11:53 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=cwTsDbeWvMCKLemej_TW.PVF8WY5UJof.4jRmV4CzbM-1758998513742-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d233589f9ea33-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 03:41:53 - openai._base_client - DEBUG - request_id: req_d23b241544944b0e8a0c5a7c89044594
2025-09-28 03:41:53 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 677자 텍스트
2025-09-28 03:41:53 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 665자, 7개 필드
2025-09-28 03:41:53 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:41:53 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 03:41:53 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 03:41:53 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '안녕하세요!'
2025-09-28 03:41:53 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '안녕하세요!

[확장정보] 배경정보: The user is initiating a conversation, possibly seeking information related to Jeonbuk National University. | 관련키워드: Jeonbuk National University, query expansion, AI Mentor'
2025-09-28 03:41:53 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-7268a13d-91a2-43c4-9ba3-116b83455521', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:41:53 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:41:53 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:41:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'3689'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3737'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_033c157bbc6f47b6ab100fdf43f86cb9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d23470a5fea33-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:41:57 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:41:57 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 18:41:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '3689', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3737', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_033c157bbc6f47b6ab100fdf43f86cb9', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d23470a5fea33-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 03:41:57 - openai._base_client - DEBUG - request_id: req_033c157bbc6f47b6ab100fdf43f86cb9
2025-09-28 03:41:57 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1110자 텍스트
2025-09-28 03:41:57 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 03:41:57 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:41:57 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 03:41:57 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 03:41:57 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 03:41:57 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (6.75초)
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 03:41:57 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '안녕하세요!...'
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f542eb637d0>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:41:56 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:41:57 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 404 Not Found"
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:41:57 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f542e9eed10>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:41:56 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:41:57 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:41:57 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 03:41:57 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f542e9ef650>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 18:41:56 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 03:41:57 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 500 Internal Server Error"
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:41:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:41:57 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 03:41:57 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 03:41:57 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (0.01초)
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 03:41:57 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 03:41:57 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 03:41:57 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 03:47:09 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:47:09 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:47:09 - main - INFO - ==================================================
2025-09-28 03:47:09 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:47:09 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:47:09 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:47:09 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:47:10 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:47:10 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:47:10 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:47:10 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:47:10 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:47:10 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:47:10 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:52:49 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 03:52:49 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 03:52:49 - main - INFO - ==================================================
2025-09-28 03:52:49 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 03:52:49 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 03:52:49 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 03:52:49 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 03:52:49 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 03:52:49 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 03:52:49 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 03:52:49 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 03:52:49 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 03:52:49 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 03:52:49 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 03:53:27 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:53:27 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요!...
2025-09-28 03:53:27 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요!...'
2025-09-28 03:53:27 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:53:27 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-13ef3a0d-b458-498b-a041-7deb4dd4dbd4', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n안녕하세요!\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:53:27 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:53:27 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 03:53:27 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa21e4f50>
2025-09-28 03:53:27 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f3aa27f7bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 03:53:27 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa2190c10>
2025-09-28 03:53:27 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:53:27 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:53:27 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:53:27 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:53:27 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:53:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1779'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1868'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998122'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_d0a80844c2544f65bbdcd29c6d4fedba'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=NKwhjPlVWPTvwo_eZ.4doVkKSPtQHj6VACRTc0YMIB8-1758999209-1.0.1.1-M7DaKy06EdD7NEKt5esmGGuKsZngXwhXDE2MBRzrK4Gf7tmXM3WE0uHl_NLC0SCMqRzsab6vGxvvO0naeMo_FdNNSX0SiSr0utILWR_MSMg; path=/; expires=Sat, 27-Sep-25 19:23:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=9JTN2QhgdlXGKXkX_fgZfz8Ssg7kBkSIkzgYkeI9H40-1758999209812-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d34371edfd1de-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:53:29 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:53:29 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 18:53:29 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '1779'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1868'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998122'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_d0a80844c2544f65bbdcd29c6d4fedba'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=NKwhjPlVWPTvwo_eZ.4doVkKSPtQHj6VACRTc0YMIB8-1758999209-1.0.1.1-M7DaKy06EdD7NEKt5esmGGuKsZngXwhXDE2MBRzrK4Gf7tmXM3WE0uHl_NLC0SCMqRzsab6vGxvvO0naeMo_FdNNSX0SiSr0utILWR_MSMg; path=/; expires=Sat, 27-Sep-25 19:23:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=9JTN2QhgdlXGKXkX_fgZfz8Ssg7kBkSIkzgYkeI9H40-1758999209812-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d34371edfd1de-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 03:53:29 - openai._base_client - DEBUG - request_id: req_d0a80844c2544f65bbdcd29c6d4fedba
2025-09-28 03:53:29 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 616자 텍스트
2025-09-28 03:53:29 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 604자, 7개 필드
2025-09-28 03:53:29 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:53:29 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 03:53:29 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 03:53:29 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '안녕하세요!'
2025-09-28 03:53:29 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '안녕하세요!

[확장정보] 배경정보: The user is greeting and initiating a conversation, possibly leading to a query about academic information. | 관련키워드: 인사, 안녕하세요, 문의'
2025-09-28 03:53:29 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-fffda9a4-48bf-4464-a422-ece7fc6382e7', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:53:29 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:53:29 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:53:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5708'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5743'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_7ea14c3873889bd381f81f418faa61e5'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d34457a06d1de-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:53:35 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:53:35 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 18:53:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5708', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5743', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_7ea14c3873889bd381f81f418faa61e5', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d34457a06d1de-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 03:53:35 - openai._base_client - DEBUG - request_id: req_7ea14c3873889bd381f81f418faa61e5
2025-09-28 03:53:35 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 2200자 텍스트
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 717자, 11개 필드
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 689자, 11개 필드
2025-09-28 03:53:35 - utils.json_utils - INFO - 🔍 3개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔍 JSON #2: complexity=heavy, score=6
2025-09-28 03:53:35 - utils.json_utils - DEBUG - 🔍 JSON #3: complexity=heavy, score=6
2025-09-28 03:53:35 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 03:53:35 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 03:53:35 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (8.26초)
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 03:53:35 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '안녕하세요!...'
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa21af750>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:53:35 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:53:35 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 404 Not Found"
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:53:35 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa204f010>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:53:35 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:53:35 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:53:35 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 03:53:35 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa20704d0>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 18:53:35 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 03:53:35 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 500 Internal Server Error"
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:53:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:53:35 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 03:53:35 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 03:53:35 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (0.01초)
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 03:53:35 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 03:53:35 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 03:53:35 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 03:58:04 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_session, stream: False
2025-09-28 03:58:04 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과에 대해 알려주세요...
2025-09-28 03:58:04 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과에 대해 알려주세요...'
2025-09-28 03:58:04 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 03:58:04 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-fca29e4e-9cc8-466b-9b0a-c79a91ac9567', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과에 대해 알려주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:58:04 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:58:04 - httpcore.connection - DEBUG - close.started
2025-09-28 03:58:04 - httpcore.connection - DEBUG - close.complete
2025-09-28 03:58:04 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 03:58:04 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa2073450>
2025-09-28 03:58:04 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f3aa27f7bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 03:58:04 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa21d24d0>
2025-09-28 03:58:04 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:58:04 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:58:04 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:58:04 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:58:04 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:58:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'3653'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3804'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998115'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_a227cea40c50492083ad9956ec546c78'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d3af8bcbfa7c0-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:58:08 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:58:08 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 18:58:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '3653', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3804', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998115', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_a227cea40c50492083ad9956ec546c78', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d3af8bcbfa7c0-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 03:58:08 - openai._base_client - DEBUG - request_id: req_a227cea40c50492083ad9956ec546c78
2025-09-28 03:58:08 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 705자 텍스트
2025-09-28 03:58:08 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 693자, 7개 필드
2025-09-28 03:58:08 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:58:08 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 03:58:08 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 03:58:08 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과에 대해 알려주세요'
2025-09-28 03:58:08 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과에 대해 알려주세요

[확장정보] 배경정보: Looking for information about the Computer Science department, including its courses and academic focus. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 03:58:08 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-9c1cb79e-9949-4566-94fb-a792afc78e34', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 03:58:08 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:58:08 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 18:58:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2010'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2245'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_eb31d4627cf44e209c6469a212a3e4e0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d3b11b929a7c0-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 03:58:11 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:58:11 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 18:58:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2010', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2245', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_eb31d4627cf44e209c6469a212a3e4e0', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d3b11b929a7c0-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 03:58:11 - openai._base_client - DEBUG - request_id: req_eb31d4627cf44e209c6469a212a3e4e0
2025-09-28 03:58:11 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 728자 텍스트
2025-09-28 03:58:11 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 03:58:11 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 03:58:11 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 03:58:11 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 03:58:11 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 03:58:11 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (6.90초)
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 03:58:11 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과에 대해 알려주세요...'
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.started
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.complete
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa2175910>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:58:10 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:58:11 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 404 Not Found"
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:58:11 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.started
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.complete
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa207f610>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 18:58:10 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 03:58:11 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:58:11 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.started
2025-09-28 03:58:11 - httpcore.connection - DEBUG - close.complete
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 03:58:11 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa21e5390>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 18:58:10 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 03:58:11 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 03:58:11 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 03:58:11 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 03:58:11 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 03:58:11 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (0.01초)
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 03:58:11 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 03:58:11 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 03:58:11 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:01:54 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test, stream: False
2025-09-28 04:01:54 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과에 대해 알려주세요...
2025-09-28 04:01:54 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과에 대해 알려주세요...'
2025-09-28 04:01:54 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:01:54 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-c8c8f99f-74f4-4d11-ae96-838e08f260b6', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과에 대해 알려주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:01:54 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:01:54 - httpcore.connection - DEBUG - close.started
2025-09-28 04:01:54 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:01:54 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:01:54 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa2070d90>
2025-09-28 04:01:54 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f3aa27f7bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:01:54 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3aa20724d0>
2025-09-28 04:01:54 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:01:54 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:01:54 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:01:54 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:01:54 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:01:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2120'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2314'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998115'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_5e6c8763787546b4b3a5b44c1cc3b9b4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d4096e9f2aa7e-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:01:57 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:01:57 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:01:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2120', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2314', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998115', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_5e6c8763787546b4b3a5b44c1cc3b9b4', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d4096e9f2aa7e-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:01:57 - openai._base_client - DEBUG - request_id: req_5e6c8763787546b4b3a5b44c1cc3b9b4
2025-09-28 04:01:57 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 668자 텍스트
2025-09-28 04:01:57 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 656자, 7개 필드
2025-09-28 04:01:57 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:01:57 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:01:57 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:01:57 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과에 대해 알려주세요'
2025-09-28 04:01:57 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과에 대해 알려주세요

[확장정보] 배경정보: Looking for information about the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴퓨터공학, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:01:57 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-6b99d8c3-074e-468e-9b63-69b32435c1ce', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:01:57 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:01:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:01:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1909'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1932'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_ae548f785afd4459a5d1cd257ab26723'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d40a909e7aa7e-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:01:59 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:01:59 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:01:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '1909', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1932', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_ae548f785afd4459a5d1cd257ab26723', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d40a909e7aa7e-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:01:59 - openai._base_client - DEBUG - request_id: req_ae548f785afd4459a5d1cd257ab26723
2025-09-28 04:01:59 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 727자 텍스트
2025-09-28 04:01:59 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:01:59 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:01:59 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:01:59 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:01:59 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:01:59 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:01:59 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (5.05초)
2025-09-28 04:01:59 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:01:59 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과에 대해 알려주세요...'
2025-09-28 04:01:59 - httpcore.connection - DEBUG - close.started
2025-09-28 04:01:59 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:01:59 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:01:59 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa207c6d0>
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:01:59 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:01:58 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44646'), (b'content-type', b'application/json')])
2025-09-28 04:02:02 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:02:02 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:02:02 - httpcore.connection - DEBUG - close.started
2025-09-28 04:02:02 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:02:02 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:02:02 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa2084a50>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 19:02:01 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 04:02:02 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:02:02 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 04:02:02 - httpcore.connection - DEBUG - close.started
2025-09-28 04:02:02 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:02:02 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:02:02 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3aa21c5150>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:02:01 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:02:02 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:02:02 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:02:02 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:02:02 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 04:02:02 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 04:02:02 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (2.77초)
2025-09-28 04:02:02 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:02:02 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:02:02 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:02:02 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:02:02 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:02:02 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:04:05 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:04:05 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:04:05 - main - INFO - ==================================================
2025-09-28 04:04:05 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:04:05 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:04:05 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:04:05 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:04:05 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:04:05 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:04:05 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:04:05 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:04:05 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:04:05 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:04:05 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:04:21 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:04:21 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...
2025-09-28 04:04:21 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...'
2025-09-28 04:04:21 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:04:21 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-3d62e927-fac9-4703-a56a-e43504c2db27', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과에서 들을 수 있는 과목을 추천해줘\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:04:21 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:04:21 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:04:21 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3ddea42d10>
2025-09-28 04:04:21 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f3ddef9acc0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:04:21 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f3ddea43290>
2025-09-28 04:04:21 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:04:21 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:04:21 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:04:21 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:04:21 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:04:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2689'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2702'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998110'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_96a137084a084aa694f156f616848d69'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=0jWXdOosXfoNhH23wT75OYmh.qGfvFmEQf_nLBvH7Uc-1758999864-1.0.1.1-IKXzADgqInLCMGDBH34U_r0L9av9DEXipdgo7aguMaCTKZ49Ap1Sik2796TWbvj7KFshKuJOp_2EHojMHXkiX_shLk71kuoQ8NN_LDNobYM; path=/; expires=Sat, 27-Sep-25 19:34:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=6kcFLGGnCD4IeNe7xvnpvPL.Ni6vAYtKpN2Y3hPQ7ik-1758999864027-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d442c3e9e018f-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:04:24 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:04:24 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:04:24 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2689'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2702'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998110'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_96a137084a084aa694f156f616848d69'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=0jWXdOosXfoNhH23wT75OYmh.qGfvFmEQf_nLBvH7Uc-1758999864-1.0.1.1-IKXzADgqInLCMGDBH34U_r0L9av9DEXipdgo7aguMaCTKZ49Ap1Sik2796TWbvj7KFshKuJOp_2EHojMHXkiX_shLk71kuoQ8NN_LDNobYM; path=/; expires=Sat, 27-Sep-25 19:34:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=6kcFLGGnCD4IeNe7xvnpvPL.Ni6vAYtKpN2Y3hPQ7ik-1758999864027-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d442c3e9e018f-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:04:24 - openai._base_client - DEBUG - request_id: req_96a137084a084aa694f156f616848d69
2025-09-28 04:04:24 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 671자 텍스트
2025-09-28 04:04:24 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 659자, 7개 필드
2025-09-28 04:04:24 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:04:24 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:04:24 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:04:24 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘'
2025-09-28 04:04:24 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘

[확장정보] 배경정보: Looking for recommended courses available in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:04:24 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-339676b0-5c50-4976-98cc-80c1141ac5f9', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:04:24 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:04:24 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:04:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5916'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5956'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_231eba77232e48ffb592bdd178c4a55f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d443e4e81018f-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:04:30 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:04:30 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:04:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5916', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5956', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_231eba77232e48ffb592bdd178c4a55f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d443e4e81018f-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:04:30 - openai._base_client - DEBUG - request_id: req_231eba77232e48ffb592bdd178c4a55f
2025-09-28 04:04:30 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1927자 텍스트
2025-09-28 04:04:30 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:04:30 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:04:30 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:04:30 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:04:30 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:04:30 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:04:30 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (9.14초)
2025-09-28 04:04:30 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:04:30 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...'
2025-09-28 04:04:30 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:04:30 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3dde9dcc10>
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:04:30 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:04:29 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9616'), (b'content-type', b'application/json')])
2025-09-28 04:04:31 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:04:31 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:04:31 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:04:31 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3dde0c2690>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 404, b'Not Found', [(b'date', b'Sat, 27 Sep 2025 19:04:30 GMT'), (b'server', b'uvicorn'), (b'content-length', b'22'), (b'content-type', b'application/json')])
2025-09-28 04:04:31 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search-sql-filter "HTTP/1.1 404 Not Found"
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:04:31 - handlers.base_handler - ERROR - API 오류: 404
2025-09-28 04:04:31 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:04:31 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f3dde0c3a10>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:04:31 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:04:31 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:04:31 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:04:31 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:04:31 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 04:04:31 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 04:04:31 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (1.74초)
2025-09-28 04:04:31 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:04:31 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:04:31 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:04:31 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:04:31 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:04:31 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:05:18 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:05:18 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:05:18 - main - INFO - ==================================================
2025-09-28 04:05:18 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:05:18 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:05:18 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:05:18 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:05:18 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:05:18 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:05:18 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:05:18 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:05:18 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:05:18 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:05:18 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:05:30 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:05:30 - service.core.mentor_service - INFO - 🤖 질문 처리: 안녕하세요 테스트입니다...
2025-09-28 04:05:30 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '안녕하세요 테스트입니다...'
2025-09-28 04:05:30 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:05:30 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-cd616ad4-97f2-4906-80b6-85d925582285', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n안녕하세요 테스트입니다\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:05:30 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:05:30 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:05:30 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fa4c4f2dad0>
2025-09-28 04:05:30 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fa4c5613bf0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:05:30 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fa4c4f37390>
2025-09-28 04:05:30 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:05:30 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:05:30 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:05:30 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:05:30 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:05:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2965'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2989'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998118'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_63c02d8490224b6e90ed87afac78e6a6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Skt8VPdcZs.nsnRexApsoNjDh6zWlQM8kSW.e1dNQNk-1758999934-1.0.1.1-gJvvEDgTAKPMi4sYh_dOGCJMLpp_oCXzg.Ar9r6Bws_3G5gC1c5C8mhF8Mrs9GkyUxrK3P_X70giErr_desYY.3ZijPKYZdhi_AyIqPC9xk; path=/; expires=Sat, 27-Sep-25 19:35:34 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=jMJS_0TNPQcZzGaxR2MdgcMi02vH3w6oWfBUr8cI76c-1758999934158-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d45e0bcc13176-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:05:34 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:05:34 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:05:34 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2965'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2989'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998118'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_63c02d8490224b6e90ed87afac78e6a6'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Skt8VPdcZs.nsnRexApsoNjDh6zWlQM8kSW.e1dNQNk-1758999934-1.0.1.1-gJvvEDgTAKPMi4sYh_dOGCJMLpp_oCXzg.Ar9r6Bws_3G5gC1c5C8mhF8Mrs9GkyUxrK3P_X70giErr_desYY.3ZijPKYZdhi_AyIqPC9xk; path=/; expires=Sat, 27-Sep-25 19:35:34 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=jMJS_0TNPQcZzGaxR2MdgcMi02vH3w6oWfBUr8cI76c-1758999934158-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d45e0bcc13176-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:05:34 - openai._base_client - DEBUG - request_id: req_63c02d8490224b6e90ed87afac78e6a6
2025-09-28 04:05:34 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 601자 텍스트
2025-09-28 04:05:34 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 589자, 7개 필드
2025-09-28 04:05:34 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:05:34 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:05:34 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:05:34 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '안녕하세요 테스트입니다'
2025-09-28 04:05:34 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '안녕하세요 테스트입니다

[확장정보] 배경정보: The user is initiating a conversation, possibly for testing purposes. | 관련키워드: 테스트, 안녕하세요'
2025-09-28 04:05:34 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-efa2e322-0c88-485a-8385-55dfd8babe58', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:05:34 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:05:34 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:05:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5783'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5805'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_41ce1595087941ad9e407dbd85c56c77'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d45f4a8793176-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:05:40 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:05:40 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:05:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5783', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5805', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_41ce1595087941ad9e407dbd85c56c77', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d45f4a8793176-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:05:40 - openai._base_client - DEBUG - request_id: req_41ce1595087941ad9e407dbd85c56c77
2025-09-28 04:05:40 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1814자 텍스트
2025-09-28 04:05:40 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:05:40 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:05:40 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:05:40 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:05:40 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:05:40 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:05:40 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (9.22초)
2025-09-28 04:05:40 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:05:40 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '안녕하세요 테스트입니다...'
2025-09-28 04:05:40 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:05:40 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa4c4f10cd0>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:05:39 GMT'), (b'server', b'uvicorn'), (b'content-length', b'357579'), (b'content-type', b'application/json')])
2025-09-28 04:05:40 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:05:40 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:05:40 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:05:40 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa4c4dab190>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:05:40 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 19:05:40 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 04:05:41 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 500 Internal Server Error"
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:05:41 - handlers.base_handler - ERROR - API 오류: 500
2025-09-28 04:05:41 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:05:41 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fa4c4dc06d0>
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:05:41 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:05:44 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 19:05:41 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 04:05:44 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 500 Internal Server Error"
2025-09-28 04:05:44 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:05:44 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:05:44 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:05:44 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:05:44 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:05:44 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 04:05:44 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 04:05:44 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (4.00초)
2025-09-28 04:05:44 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:05:44 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:05:44 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:05:44 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:05:44 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:05:44 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:06:29 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:06:29 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:06:29 - main - INFO - ==================================================
2025-09-28 04:06:29 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:06:29 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:06:29 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:06:29 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:06:29 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:06:29 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:06:29 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:06:29 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:06:29 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:06:29 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:06:29 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:06:42 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test, stream: False
2025-09-28 04:06:42 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 커리큘럼 추천해주세요...
2025-09-28 04:06:42 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 커리큘럼 추천해주세요...'
2025-09-28 04:06:42 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:06:42 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-d95e37be-1d03-40d3-9804-c412c32ad750', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 커리큘럼 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:06:42 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:06:42 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:06:42 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f51d603fdd0>
2025-09-28 04:06:42 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f51d6596cc0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:06:42 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f51d603f910>
2025-09-28 04:06:42 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:06:42 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:06:42 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:06:42 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:06:42 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:06:45 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2144'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2312'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998114'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_3b7c4c4c5fcb4ea7a12a882cdb59a0a4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=0Lf6J09rSUz5_XPvpzVvwCAgH_EazXIzyhBPuz5RfdI-1759000005-1.0.1.1-5dYawIRPdLY9kGzP7rjsmEVZad0oFivzDT5QpdaTYHM_BD2i7H4w5aHc_1WF2ikUDBVjeFNCm8klq54WdEKEJ7QYdJRAaxMSUUg08P9xtX0; path=/; expires=Sat, 27-Sep-25 19:36:45 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=usmbFQIc3394dbvAw2CEHKVmLnY2W_qF80rNjtVdUhM-1759000005442-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d47a23f53bcc4-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:06:45 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:06:45 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:06:45 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2144'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2312'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998114'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_3b7c4c4c5fcb4ea7a12a882cdb59a0a4'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=0Lf6J09rSUz5_XPvpzVvwCAgH_EazXIzyhBPuz5RfdI-1759000005-1.0.1.1-5dYawIRPdLY9kGzP7rjsmEVZad0oFivzDT5QpdaTYHM_BD2i7H4w5aHc_1WF2ikUDBVjeFNCm8klq54WdEKEJ7QYdJRAaxMSUUg08P9xtX0; path=/; expires=Sat, 27-Sep-25 19:36:45 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=usmbFQIc3394dbvAw2CEHKVmLnY2W_qF80rNjtVdUhM-1759000005442-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d47a23f53bcc4-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:06:45 - openai._base_client - DEBUG - request_id: req_3b7c4c4c5fcb4ea7a12a882cdb59a0a4
2025-09-28 04:06:45 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 694자 텍스트
2025-09-28 04:06:45 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 682자, 7개 필드
2025-09-28 04:06:45 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:06:45 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:06:45 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:06:45 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 커리큘럼 추천해주세요'
2025-09-28 04:06:45 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 커리큘럼 추천해주세요

[확장정보] 배경정보: Looking for recommended curriculum and courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴퓨터공학, 커리큘럼, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝'
2025-09-28 04:06:45 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-38d6a84e-1a6f-462e-8e66-267ed9ca9ae3', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:06:45 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:06:45 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:06:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2517'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2536'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_e90591960d0a457fafe7acae82b00061'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d47b22c74bcc4-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:06:48 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:06:48 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:06:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2517', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2536', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_e90591960d0a457fafe7acae82b00061', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d47b22c74bcc4-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:06:48 - openai._base_client - DEBUG - request_id: req_e90591960d0a457fafe7acae82b00061
2025-09-28 04:06:48 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 728자 텍스트
2025-09-28 04:06:48 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:06:48 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:06:48 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:06:48 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:06:48 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:06:48 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:06:48 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (5.30초)
2025-09-28 04:06:48 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:06:48 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과 커리큘럼 추천해주세요...'
2025-09-28 04:06:48 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:06:48 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d56790d0>
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:06:48 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:06:47 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9616'), (b'content-type', b'application/json')])
2025-09-28 04:06:51 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:06:51 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:06:51 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:06:51 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d56aa7d0>
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:06:51 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:06:51 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:06:53 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:06:53 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:06:53 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d56abb90>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:06:52 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:06:53 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:06:53 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:06:53 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:06:53 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 04:06:53 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 04:06:53 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (5.73초)
2025-09-28 04:06:53 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:06:53 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:06:53 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:06:53 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:06:53 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:06:53 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:07:32 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:07:32 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 추천해줘...
2025-09-28 04:07:32 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 추천해줘...'
2025-09-28 04:07:32 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:07:32 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-2a9538b9-1d76-4b85-be15-a4f8515f48e2', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 추천해줘\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:07:32 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:07:32 - httpcore.connection - DEBUG - close.started
2025-09-28 04:07:32 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:07:32 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:07:32 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f51d56ca110>
2025-09-28 04:07:32 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f51d6596cc0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:07:32 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f51d56ca210>
2025-09-28 04:07:32 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:07:32 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:07:32 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:07:32 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:07:32 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:07:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2257'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2268'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998118'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_b9130d0cc2794886a815e36faf4fb691'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d48db38a3018f-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:07:35 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:07:35 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:07:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2257', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2268', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998118', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_b9130d0cc2794886a815e36faf4fb691', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d48db38a3018f-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:07:35 - openai._base_client - DEBUG - request_id: req_b9130d0cc2794886a815e36faf4fb691
2025-09-28 04:07:35 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 663자 텍스트
2025-09-28 04:07:35 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 651자, 7개 필드
2025-09-28 04:07:35 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:07:35 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:07:35 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:07:35 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 추천해줘'
2025-09-28 04:07:35 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 추천해줘

[확장정보] 배경정보: Looking for recommendations related to the Computer Science department. | 관련키워드: 컴퓨터공학과, 컴퓨터공학, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:07:35 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-40418439-d845-4989-be07-7fbf9c527d69', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:07:35 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:07:35 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:07:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'3492'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3516'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_16e4d482b36d4a81a2b1fb254ddfd05d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d48ea997a018f-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:07:39 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:07:39 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:07:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '3492', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3516', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_16e4d482b36d4a81a2b1fb254ddfd05d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d48ea997a018f-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:07:39 - openai._base_client - DEBUG - request_id: req_16e4d482b36d4a81a2b1fb254ddfd05d
2025-09-28 04:07:39 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1128자 텍스트
2025-09-28 04:07:39 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:07:39 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:07:39 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:07:39 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:07:39 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:07:39 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:07:39 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (6.18초)
2025-09-28 04:07:39 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:07:39 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과 추천해줘...'
2025-09-28 04:07:39 - httpcore.connection - DEBUG - close.started
2025-09-28 04:07:39 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:07:39 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:07:39 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d6031ad0>
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:07:39 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:07:38 GMT'), (b'server', b'uvicorn'), (b'content-length', b'10052'), (b'content-type', b'application/json')])
2025-09-28 04:07:40 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:07:40 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:07:40 - httpcore.connection - DEBUG - close.started
2025-09-28 04:07:40 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:07:40 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:07:40 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d56d21d0>
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:07:40 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:07:40 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:07:42 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:07:42 - httpcore.connection - DEBUG - close.started
2025-09-28 04:07:42 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:07:42 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:07:42 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f51d600bf50>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:07:42 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:07:42 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:07:42 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:07:42 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:07:42 - service.nodes.query_route.heavy_nodes - WARNING - ⚠️ [HEAVY] curriculum 핸들러 사용 불가
2025-09-28 04:07:42 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 2개 단계 성공
2025-09-28 04:07:42 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (3.43초)
2025-09-28 04:07:42 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:07:42 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:07:42 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:07:42 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:07:42 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:07:42 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:07:47 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:07:47 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:07:47 - main - INFO - ==================================================
2025-09-28 04:07:47 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:07:47 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:07:47 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:07:47 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:07:47 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:07:47 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:07:47 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:07:47 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:07:47 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:07:47 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:07:47 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:08:10 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test2, stream: False
2025-09-28 04:08:10 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 커리큘럼 추천해주세요...
2025-09-28 04:08:10 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 커리큘럼 추천해주세요...'
2025-09-28 04:08:10 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:08:10 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-58b49301-9017-4f21-8833-5de963166f57', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 커리큘럼 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:08:10 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:08:10 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:08:10 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7faef38a9650>
2025-09-28 04:08:10 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7faef3ee3c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:08:10 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7faef38b7d50>
2025-09-28 04:08:10 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:10 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:10 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:10 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:10 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:08:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'3200'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3225'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998114'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_b9c9810e2a1a413fa1f1f46f90e32b49'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=TuS7LSRSBvkuc3STx2fTJ6uGmJQoZKr5iDDYeKi3MMk-1759000094-1.0.1.1-tN8LamoAeuokri7TnJslmvPKagfBV.Vy1WbK5gwYElkBUjlqCbN77_VEdrLTfG6qHuosGBsp6EgCj2aTMduWhVDYm5WePo2Fj690LN_Z2RM; path=/; expires=Sat, 27-Sep-25 19:38:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=N_.p7Ib1JoeoVgi9RNA5iYBg2zoU3_BpQACUIjT3Rdk-1759000094297-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d49c81b9fea92-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:08:14 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:14 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:08:14 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '3200'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3225'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998114'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_b9c9810e2a1a413fa1f1f46f90e32b49'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=TuS7LSRSBvkuc3STx2fTJ6uGmJQoZKr5iDDYeKi3MMk-1759000094-1.0.1.1-tN8LamoAeuokri7TnJslmvPKagfBV.Vy1WbK5gwYElkBUjlqCbN77_VEdrLTfG6qHuosGBsp6EgCj2aTMduWhVDYm5WePo2Fj690LN_Z2RM; path=/; expires=Sat, 27-Sep-25 19:38:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=N_.p7Ib1JoeoVgi9RNA5iYBg2zoU3_BpQACUIjT3Rdk-1759000094297-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d49c81b9fea92-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:08:14 - openai._base_client - DEBUG - request_id: req_b9c9810e2a1a413fa1f1f46f90e32b49
2025-09-28 04:08:14 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 670자 텍스트
2025-09-28 04:08:14 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 658자, 7개 필드
2025-09-28 04:08:14 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:08:14 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:08:14 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:08:14 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 커리큘럼 추천해주세요'
2025-09-28 04:08:14 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 커리큘럼 추천해주세요

[확장정보] 배경정보: Looking for curriculum recommendations in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴퓨터공학, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:08:14 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-7ce75043-0783-4f05-93f3-7c5f519fb93a', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:08:14 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:14 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:19 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:08:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5475'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5496'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_78843f1715ec435da72f9edf06813c36'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d49dd7b92ea92-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:08:19 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:08:19 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:20 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:08:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5475', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5496', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_78843f1715ec435da72f9edf06813c36', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d49dd7b92ea92-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:08:20 - openai._base_client - DEBUG - request_id: req_78843f1715ec435da72f9edf06813c36
2025-09-28 04:08:20 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 2200자 텍스트
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 717자, 11개 필드
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 689자, 11개 필드
2025-09-28 04:08:20 - utils.json_utils - INFO - 🔍 3개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔍 JSON #2: complexity=heavy, score=6
2025-09-28 04:08:20 - utils.json_utils - DEBUG - 🔍 JSON #3: complexity=heavy, score=6
2025-09-28 04:08:20 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:08:20 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:08:20 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:08:20 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (9.13초)
2025-09-28 04:08:20 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:08:20 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과 커리큘럼 추천해주세요...'
2025-09-28 04:08:20 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:08:20 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef37086d0>
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:20 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:08:19 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9616'), (b'content-type', b'application/json')])
2025-09-28 04:08:23 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:23 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:08:23 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:08:23 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef38d3dd0>
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:23 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:08:22 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:08:24 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:24 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:08:24 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef3743cd0>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:08:24 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:08:24 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:24 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 컴퓨터공학과 커리큘럼 추천해주세요
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='컴퓨터공학과 커리큘럼 추천해주세요', additional_kwargs={}, response_metadata={}, id='b9ee0fe7-0a36-497b-8fb6-6033f02696d2')], 'user_query': '컴퓨터공학과 커리큘럼 추천해주세요', 'session_id': 'test2', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7faef3c874d0>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '전전 별칭 감지 → Mapping 먼저', 'expanded_query': '컴퓨터공학과 커리큘럼 추천해주세요\n\n[확장정보] 배경정보: Looking for curriculum recommendations in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴퓨터공학, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어', 'keywords': '컴퓨터공학과,컴퓨터공학,프로그래밍,알고리즘,데이터구조,AI,머신러닝,소프트웨어', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 9.132400035858154}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO -   📝 쿼리: 컴퓨터공학과 커리큘럼 추천해주세요
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO -   🎯 세션 ID: test2
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:08:24 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:08:24 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:08:24 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef375d490>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:08:24 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:08:54 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:08:24 GMT'), (b'server', b'uvicorn'), (b'content-length', b'7374'), (b'content-type', b'application/json')])
2025-09-28 04:08:54 - httpx - INFO - HTTP Request: POST http://curriculum:7996/chat "HTTP/1.1 200 OK"
2025-09-28 04:08:54 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:08:54 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:08:54 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:08:54 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - 📨 HTTP 응답 수신: 200
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - ✅ JSON 파싱 성공
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - 📄 응답 메시지 길이: 3354자
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 처리 성공
2025-09-28 04:08:54 - httpcore.connection - DEBUG - close.started
2025-09-28 04:08:54 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - 📡 커리큘럼 서비스 응답: {'success': True, 'message': '쿼리: 컴퓨터공학과 커리큘럼 추천해주세요\n\n1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 지식을 습득하고, 실무에서 활용 가능한 프로그래밍 및 시스템 설계 능력을 배우고 싶습니다.\n2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등의 분야에서 전문가로 활동하고 싶습니다.\n3. 직업 분야: 소프트웨어 개발 및 컴퓨터 시스템 설계.\n4. 직업: 소프트웨어 엔지니어.\n\n최종 쿼리: 소프트웨어 엔지니어.\n\n정의: 소프트웨어 엔지니어는 컴퓨터 시스템의 요구사항을 분석하고, 이를 바탕으로 소프트웨어를 설계, 개발, 테스트, 유지보수하는 전문가이다. 다양한 프로그래밍 언어와 도구를 활용하여 사용자 요구에 맞는 소프트웨어 솔루션을 제공한다.\n\n주요 역할:\n- 소프트웨어 설계 및 개발\n- 사용자 요구사항 분석 및 시스템 설계\n- 다양한 프로그래밍 언어(C++, Java, Python 등)를 활용한 소프트웨어 개발\n- 소프트웨어 테스트 및 디버깅을 통한 품질 보증\n\n- 시스템 아키텍처 설계\n- 대규모 시스템의 구조 설계 및 최적화\n- 클라우드 컴퓨팅 환경에서의 시스템 배포 및 관리\n- 데이터베이스 설계 및 관리\n\n- 프로젝트 관리 및 협업\n- 애자일(Agile) 방법론을 활용한 프로젝트 관리\n- 팀원 간의 협업 및 커뮤니케이션을 통한 효율적인 개발 프로세스 유지\n- 고객과의 소통을 통한 요구사항 조정 및 피드백 반영\n\n추출된 기술 또는 지식:\n- 기술: 프로그래밍, 시스템 설계, 소프트웨어 테스트\n- 지식: 컴퓨터공학 기초, 소프트웨어 개발 프로세스\n\n추론된 기술:\n1. 프로그래밍 및 소프트웨어 개발\n- 객체지향 프로그래밍(OOP) 및 함수형 프로그래밍 기법\n- 웹 개발(HTML, CSS, JavaScript) 및 모바일 앱 개발(Android, iOS)\n- 데이터 구조 및 알고리즘 설계\n\n2. 시스템 설계 및 아키텍처\n- 마이크로서비스 아키텍처 및 RESTful API 설계\n- 클라우드 플랫폼(AWS, Azure, GCP) 활용\n- 데이터베이스 관리 시스템(MySQL, PostgreSQL, MongoDB) 설계\n\n3. 소프트웨어 테스트 및 품질 보증\n- 단위 테스트, 통합 테스트, 시스템 테스트 기법\n- 자동화 테스트 도구(Selenium, JUnit, TestNG) 활용\n- 지속적 통합/지속적 배포(CI/CD) 파이프라인 구축\n\n4. 프로젝트 관리 및 협업\n- 애자일(Agile) 및 스크럼(Scrum) 방법론 적용\n- 버전 관리 시스템(Git, SVN) 활용\n- 협업 도구(JIRA, Confluence, Slack) 사용\n\n5. 실무에서 활용되는 툴 및 플랫폼\n- 통합 개발 환경(IDE) 사용 (Eclipse, IntelliJ, Visual Studio)\n- 컨테이너화 도구(Docker, Kubernetes) 활용\n- DevOps 및 자동화 도구(Jenkins, Ansible) 사용\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n- 컴퓨터 과학 기초(Computer Science Fundamentals) → 데이터 구조, 알고리즘, 운영체제\n- 소프트웨어 공학(Software Engineering) → 소프트웨어 개발 생명주기, 요구사항 분석\n- 네트워크(Networking) → TCP/IP, HTTP, 네트워크 프로토콜\n\n2. 전문 지식 (Specialized Knowledge)\n- 데이터베이스(Database) → 관계형 데이터베이스, NoSQL 데이터베이스\n- 클라우드 컴퓨팅(Cloud Computing) → 클라우드 서비스 모델, 가상화 기술\n- 보안(Security) → 소프트웨어 보안, 암호화 기법\n\n3. 실무 지식 (Practical Knowledge)\n- 소프트웨어 개발 도구 및 환경 설정 → IDE, 빌드 도구(Maven, Gradle)\n- 버전 관리 및 협업 → Git 브랜치 전략, 코드 리뷰 프로세스\n- 성능 최적화 및 문제 해결 → 프로파일링, 메모리 관리, 병목 현상 분석\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 기초회로실험\n2학년 2학기\n선수과목: 창의적공학설계입문,회로이론 1\n강좌명: 전자회로실험\n3학년 1학기\n선수과목: 전자회로 1\n강좌명: 정보검색\n4학년 2학기\n선수과목: 데이터베이스\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 데이터베이스\n3학년 1학기\n선수과목: 자료구조\n강좌명: 모바일프로그래밍\n2학년 2학기\n선수과목: 객체지향프로그래밍\n강좌명: 수치해석및최적화\n3학년 1학기\n선수과목: 선형대수학\n강좌명: 데이터마이닝\n3학년 2학기\n선수과목: 인공지능\n강좌명: 프로그래밍언어론\n3학년 1학기\n선수과목: 객체지향프로그래밍\n강좌명: 인체와의복\n1학년 2학기\n선수과목: -\n강좌명: 컴퓨터비전\n4학년 1학기\n선수과목: 인공지능, 기계학습\n강좌명: 임베디드시스템\n4학년 1학기\n선수과목: 리눅스프로그래밍, 소프트웨어공학\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n\n=== 소프트웨어공학과 ===\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 소프트웨어공학개론 1\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어아키텍처이론과실제\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계\n강좌명: 소프트웨어공학캡스톤프로젝트\n4학년 1학기\n선수과목: 소프트웨어시스템분석및설계, 소프트웨어도메인모델링\n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: 해당없음\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 소프트웨어시스템분석및설계\n3학년 2학기\n선수과목: 소프트웨어공학개론, 소프트웨어개발프로세스\n강좌명: 소프트웨어품질및테스팅\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계, 소스코드분석\n강좌명: 창의적공학설계입문\n1학년 2학기\n선수과목: \n강좌명: JAVA프로그래밍및실습 2\n2학년 2학기\n선수과목: JAVA프로그래밍및실습 1\n강좌명: JAVA프로그래밍및실습 1\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어보안\n4학년 1학기\n선수과목: 운영체제\n강좌명: 고급웹프로그래밍\n3학년 2학기\n선수과목: 웹프로그래밍\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 디지털공학\n강좌명: 소프트웨어개발프로세스\n3학년 1학기\n선수과목: 소프트웨어공학개론', 'service': 'curriculum', 'query': '컴퓨터공학과 커리큘럼 추천해주세요'}
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 응답 성공: 3354자 응답
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - 📄 응답 미리보기: 쿼리: 컴퓨터공학과 커리큘럼 추천해주세요

1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 지식을 습득하고, 실무에서 활용 가능한 프로그래밍 및 시스템 설계 능력을 배우고 싶습니다.
2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등의 분야에서 전문가로 활동하고 싶습니다.
3. 직업 분야: 소프트웨어 개발 및 컴퓨...
2025-09-28 04:08:54 - handlers.curriculum_handler - INFO - ============================================================
2025-09-28 04:08:54 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] curriculum 검색 완료
2025-09-28 04:08:54 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 3개 단계 성공
2025-09-28 04:08:54 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (34.05초)
2025-09-28 04:08:54 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:08:54 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:08:54 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:08:54 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:08:54 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:08:54 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:09:21 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:09:21 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...
2025-09-28 04:09:21 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...'
2025-09-28 04:09:21 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:09:21 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-2d230e99-1536-4662-947d-63ec1a23b681', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과에서 들을 수 있는 과목을 추천해줘\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:09:21 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:09:21 - httpcore.connection - DEBUG - close.started
2025-09-28 04:09:21 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:09:21 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:09:21 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7faef3853890>
2025-09-28 04:09:21 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7faef3ee3c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:09:21 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7faef375f7d0>
2025-09-28 04:09:21 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:21 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:21 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:21 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:21 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:09:23 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2171'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2202'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998109'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_48c6061a273b49d88a35ecef40265d63'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d4b7f3a3ed1ee-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:09:23 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:23 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:09:23 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2171', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2202', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998109', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_48c6061a273b49d88a35ecef40265d63', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d4b7f3a3ed1ee-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:09:23 - openai._base_client - DEBUG - request_id: req_48c6061a273b49d88a35ecef40265d63
2025-09-28 04:09:23 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 657자 텍스트
2025-09-28 04:09:23 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 645자, 7개 필드
2025-09-28 04:09:23 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:09:23 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:09:23 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:09:23 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘'
2025-09-28 04:09:23 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘

[확장정보] 배경정보: Looking for recommended courses available in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:09:23 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-69b45ba9-929e-4b85-98e4-cc63f10cf65b', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:09:23 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:23 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:09:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2205'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2223'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_b0a8daf4c27a4ad3862129dfc57af2b3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d4b8e2b2ed1ee-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:09:25 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:25 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:09:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2205', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2223', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_b0a8daf4c27a4ad3862129dfc57af2b3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d4b8e2b2ed1ee-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:09:25 - openai._base_client - DEBUG - request_id: req_b0a8daf4c27a4ad3862129dfc57af2b3
2025-09-28 04:09:25 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 727자 텍스트
2025-09-28 04:09:25 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:09:25 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:09:25 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:09:25 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:09:25 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:09:25 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:09:25 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (4.83초)
2025-09-28 04:09:25 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:09:25 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘...'
2025-09-28 04:09:25 - httpcore.connection - DEBUG - close.started
2025-09-28 04:09:25 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:09:25 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:09:25 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef375f490>
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:25 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:09:25 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9616'), (b'content-type', b'application/json')])
2025-09-28 04:09:27 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:27 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:09:27 - httpcore.connection - DEBUG - close.started
2025-09-28 04:09:27 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:09:27 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:09:27 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef376f590>
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:27 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:09:27 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:09:29 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:29 - httpcore.connection - DEBUG - close.started
2025-09-28 04:09:29 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:09:29 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:09:29 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faef3770450>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:09:28 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:09:29 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:29 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='컴퓨터공학과에서 들을 수 있는 과목을 추천해줘', additional_kwargs={}, response_metadata={}, id='f3f1af2e-2198-4a33-a67a-d14f0e16c3dd')], 'user_query': '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘', 'session_id': 'default', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7faef3c874d0>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '전전 별칭 감지 → Mapping 먼저', 'expanded_query': '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘\n\n[확장정보] 배경정보: Looking for recommended courses available in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어', 'keywords': '컴퓨터공학과,컴공,프로그래밍,알고리즘,데이터구조,AI,머신러닝,소프트웨어', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 4.82524037361145}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO -   📝 쿼리: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO -   🎯 세션 ID: default
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:09:29 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:09:29 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:09:29 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7faefa91b850>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:09:29 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:09:45 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:09:28 GMT'), (b'server', b'uvicorn'), (b'content-length', b'6931'), (b'content-type', b'application/json')])
2025-09-28 04:09:45 - httpx - INFO - HTTP Request: POST http://curriculum:7996/chat "HTTP/1.1 200 OK"
2025-09-28 04:09:45 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:09:45 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:09:45 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:09:45 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - 📨 HTTP 응답 수신: 200
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - ✅ JSON 파싱 성공
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - 📄 응답 메시지 길이: 3035자
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 처리 성공
2025-09-28 04:09:45 - httpcore.connection - DEBUG - close.started
2025-09-28 04:09:45 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - 📡 커리큘럼 서비스 응답: {'success': True, 'message': '쿼리: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘\n\n1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 수강하여 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.\n2. 진로 목표: 컴퓨터공학의 다양한 분야에서 전문성을 갖추고, 기술 개발 및 연구에 기여할 수 있는 전문가로 활동하고 싶습니다.\n3. 직업 분야: 컴퓨터공학.\n4. 직업: 컴퓨터공학자.\n\n최종 쿼리: 컴퓨터공학자.\n\n정의: 컴퓨터공학자는 컴퓨터 시스템의 설계, 개발, 분석 및 응용을 연구하는 전문가로, 소프트웨어와 하드웨어의 통합을 통해 다양한 기술적 문제를 해결하고 혁신을 이끌어내는 역할을 수행합니다.\n\n주요 역할:\n- 소프트웨어 개발 및 시스템 설계\n- 알고리즘 및 데이터 구조 설계 및 구현\n- 컴퓨터 네트워크 및 보안 시스템 개발\n- 인공지능 및 머신러닝 모델 개발 및 적용\n- 데이터베이스 설계 및 관리\n\n- 하드웨어 설계 및 최적화\n- 컴퓨터 아키텍처 및 마이크로프로세서 설계\n- 임베디드 시스템 및 IoT 기기 개발\n- 디지털 회로 설계 및 FPGA 프로그래밍\n\n- 연구 및 기술 혁신\n- 최신 기술 동향 분석 및 연구\n- 새로운 컴퓨팅 패러다임 및 기술 개발\n- 학술 논문 작성 및 발표\n\n추출된 기술 또는 지식:\n- 기술: 소프트웨어 개발, 알고리즘 설계, 네트워크 및 보안, 인공지능\n- 지식: 컴퓨터 아키텍처, 데이터베이스, 디지털 회로\n\n추론된 기술:\n1. 소프트웨어 개발 및 프로그래밍\n- 프로그래밍 언어(C, C++, Java, Python 등) 숙련\n- 소프트웨어 공학 원칙 및 디자인 패턴 이해\n- 버전 관리 시스템(Git) 활용\n\n2. 알고리즘 및 데이터 구조\n- 정렬, 검색, 그래프 알고리즘 등 기본 알고리즘 이해\n- 데이터 구조(리스트, 스택, 큐, 트리, 해시 테이블 등) 활용\n- 알고리즘 복잡도 분석 및 최적화\n\n3. 컴퓨터 네트워크 및 보안\n- TCP/IP 프로토콜 및 네트워크 아키텍처 이해\n- 네트워크 보안 기법(방화벽, 암호화, 인증) 적용\n- 사이버 보안 위협 분석 및 대응 전략\n\n4. 인공지능 및 머신러닝\n- 지도학습, 비지도학습, 강화학습 알고리즘 이해\n- 딥러닝 프레임워크(TensorFlow, PyTorch) 활용\n- 데이터 전처리 및 모델 평가 기법\n\n5. 하드웨어 설계 및 임베디드 시스템\n- 디지털 논리 설계 및 VHDL/Verilog 프로그래밍\n- 마이크로컨트롤러 및 임베디드 시스템 프로그래밍\n- 하드웨어-소프트웨어 통합 및 테스트\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n- 컴퓨터 아키텍처 → CPU 설계, 메모리 계층 구조, 명령어 집합\n- 데이터베이스 시스템 → 관계형 데이터베이스, SQL, 트랜잭션 관리\n- 운영체제 → 프로세스 관리, 메모리 관리, 파일 시스템\n\n2. 전문 지식 (Specialized Knowledge)\n- 네트워크 프로토콜 및 보안 → 네트워크 설계, 암호화 기법\n- 인공지능 및 머신러닝 → 모델 학습, 데이터 마이닝\n- 디지털 회로 및 시스템 설계 → FPGA, ASIC 설계\n\n3. 실무 지식 (Practical Knowledge)\n- 소프트웨어 개발 도구 및 환경 → IDE, 디버깅 툴\n- 클라우드 컴퓨팅 및 분산 시스템 → AWS, Azure, Kubernetes\n- 프로젝트 관리 및 협업 툴 → JIRA, Confluence, Slack\n\n컴퓨터공학과에서 수강할 수 있는 과목들은 이러한 기술과 지식을 습득하는 데 필수적이며, 다양한 분야의 전문성을 갖추는 데 도움을 줄 것입니다.\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 기초회로실험\n2학년 2학기\n선수과목: 창의적공학설계입문,회로이론 1\n강좌명: 전자회로실험\n3학년 1학기\n선수과목: 전자회로 1\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 정보검색\n4학년 2학기\n선수과목: 데이터베이스\n강좌명: 인공지능\n3학년 1학기\n선수과목: 알고리즘, 확률및통계\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 암호론\n3학년 1학기\n선수과목: 데이터통신\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 논리설계\n강좌명: 논리설계\n2학년 1학기\n선수과목: 이산수학\n강좌명: 프로그래밍언어론\n3학년 1학기\n선수과목: 객체지향프로그래밍\n강좌명: 인체와의복\n1학년 2학기\n선수과목: -\n강좌명: 컴퓨터비전\n4학년 1학기\n선수과목: 인공지능, 기계학습\n강좌명: 컴퓨터네트워크\n3학년 1학기\n선수과목: 데이터통신\n\n=== 소프트웨어공학과 ===\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 디지털공학\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 소프트웨어공학캡스톤프로젝트\n4학년 1학기\n선수과목: 소프트웨어시스템분석및설계, 소프트웨어도메인모델링\n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: 해당없음\n강좌명: 컴퓨팅문제와알고리즘\n3학년 2학기\n선수과목: 알고리즘\n강좌명: C++프로그래밍\n1학년 2학기\n선수과목: \n강좌명: 데이터사이언스\n2학년 2학기\n선수과목: Python 프로그래밍 1\n강좌명: 창의적공학설계입문\n1학년 2학기\n선수과목: \n강좌명: 소프트웨어보안\n4학년 1학기\n선수과목: 운영체제\n강좌명: 리눅스시스템\n4학년 2학기\n선수과목: 운영체제\n강좌명: 선형대수학\n2학년 2학기\n선수과목: 이산수학\n강좌명: 식품경제원론\n1학년 2학기\n선수과목: 없음\n강좌명: 이산수학\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학개론 1\n2학년 1학기\n선수과목: \n강좌명: 데이터통신\n3학년 2학기\n선수과목: 컴퓨터구조\n강좌명: 디지털공학\n1학년 2학기\n선수과목:', 'service': 'curriculum', 'query': '컴퓨터공학과에서 들을 수 있는 과목을 추천해줘'}
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 응답 성공: 3035자 응답
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - 📄 응답 미리보기: 쿼리: 컴퓨터공학과에서 들을 수 있는 과목을 추천해줘

1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 수강하여 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.
2. 진로 목표: 컴퓨터공학의 다양한 분야에서 전문성을 갖추고, 기술 개발 및 연구에 기여할 수 있는 전문가로 활동하고 싶습니다.
3. 직업 분야: 컴퓨터공학.
4. 직업: 컴퓨터공학자.
...
2025-09-28 04:09:45 - handlers.curriculum_handler - INFO - ============================================================
2025-09-28 04:09:45 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] curriculum 검색 완료
2025-09-28 04:09:45 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 3개 단계 성공
2025-09-28 04:09:45 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (19.85초)
2025-09-28 04:09:45 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:09:45 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:09:45 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:09:45 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:09:45 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:09:45 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:11:55 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:11:55 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:11:55 - main - INFO - ==================================================
2025-09-28 04:11:55 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:11:55 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:11:55 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:11:55 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:11:55 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:11:55 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:11:55 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:11:55 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:11:55 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:11:55 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:11:55 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:12:09 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_course, stream: False
2025-09-28 04:12:09 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 과목 추천해주세요...
2025-09-28 04:12:09 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 과목 추천해주세요...'
2025-09-28 04:12:09 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:12:09 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-d2b1988b-f9eb-4455-9b4e-dabbd32e0c52', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 과목 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:12:09 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:12:09 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:12:09 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f412493b1d0>
2025-09-28 04:12:09 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f4124e92de0> server_hostname='api.openai.com' timeout=None
2025-09-28 04:12:09 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f41249474d0>
2025-09-28 04:12:09 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:09 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:09 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:09 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:09 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:12:12 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2215'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2295'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998115'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_f3a3df04b17b4cbbbf983b52c09fa7f4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=W7TAfa6tyOAX.fSGMER0R1eDL4thR913.Xz0SK7CUMg-1759000332-1.0.1.1-qwU434o9jaNvc7qH9rNKBVHxJzR_w7UwEd96Jp_9cVRaAUcbsyH5AMgakkDES9_DfbMYUhO_APsxqb.Sjh0jJlJX93BjimOJqsUx1hDgUGU; path=/; expires=Sat, 27-Sep-25 19:42:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=dUx5BwDwBvLsejG2u1iZ4SJf2tjdrxTE3xdj9yUrmG4-1759000332314-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d4f9d9cb2d1f5-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:12:12 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:12 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:12:12 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2215'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2295'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998115'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_f3a3df04b17b4cbbbf983b52c09fa7f4'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=W7TAfa6tyOAX.fSGMER0R1eDL4thR913.Xz0SK7CUMg-1759000332-1.0.1.1-qwU434o9jaNvc7qH9rNKBVHxJzR_w7UwEd96Jp_9cVRaAUcbsyH5AMgakkDES9_DfbMYUhO_APsxqb.Sjh0jJlJX93BjimOJqsUx1hDgUGU; path=/; expires=Sat, 27-Sep-25 19:42:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=dUx5BwDwBvLsejG2u1iZ4SJf2tjdrxTE3xdj9yUrmG4-1759000332314-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d4f9d9cb2d1f5-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:12:12 - openai._base_client - DEBUG - request_id: req_f3a3df04b17b4cbbbf983b52c09fa7f4
2025-09-28 04:12:12 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 643자 텍스트
2025-09-28 04:12:12 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 631자, 7개 필드
2025-09-28 04:12:12 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:12:12 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:12:12 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:12:12 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 과목 추천해주세요'
2025-09-28 04:12:12 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 과목 추천해주세요

[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:12:12 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-dcedc94c-d1f9-4234-b3bf-6c46afd16943', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n3) 학과/대학 행정정보 → SQL\n4) 학년/학기/분반 조건 → SQL\n5) 강좌 내용/주제 검색 → FAISS\n6) 융합/복수전공 커리큘럼 설계 → Curriculum (단일 전공은 SQL)\n7) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:12:12 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:12 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:12:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2259'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2278'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999155'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_0aae1e3318954f66a8a2999ee47d28b3'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d4fad1eecd1f5-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:12:14 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:14 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:12:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2259', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2278', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999155', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1ms', 'x-request-id': 'req_0aae1e3318954f66a8a2999ee47d28b3', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d4fad1eecd1f5-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:12:14 - openai._base_client - DEBUG - request_id: req_0aae1e3318954f66a8a2999ee47d28b3
2025-09-28 04:12:14 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 728자 텍스트
2025-09-28 04:12:14 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:12:14 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:12:14 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:12:14 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:12:14 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:12:14 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:12:14 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (4.99초)
2025-09-28 04:12:14 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:12:14 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과 과목 추천해주세요...'
2025-09-28 04:12:14 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:12:14 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f41249403d0>
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:14 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:14 GMT'), (b'server', b'uvicorn'), (b'content-length', b'10052'), (b'content-type', b'application/json')])
2025-09-28 04:12:16 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:16 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:12:16 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:12:16 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f4126a9c790>
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:16 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:16 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:12:18 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:18 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:12:18 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f411ff5b290>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:12:18 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:18 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 컴퓨터공학과 과목 추천해주세요
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='컴퓨터공학과 과목 추천해주세요', additional_kwargs={}, response_metadata={}, id='f1a1ee87-09a0-4ba8-8065-904b31ca8865')], 'user_query': '컴퓨터공학과 과목 추천해주세요', 'session_id': 'test_course', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7f4124e77e10>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '전전 별칭 감지 → Mapping 먼저', 'expanded_query': '컴퓨터공학과 과목 추천해주세요\n\n[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어', 'keywords': '컴퓨터공학과,컴공,프로그래밍,알고리즘,데이터구조,AI,머신러닝,소프트웨어', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 4.986682653427124}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO -   📝 쿼리: 컴퓨터공학과 과목 추천해주세요
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO -   🎯 세션 ID: test_course
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:12:18 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:12:18 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:12:18 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f411ff70a50>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:18 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:25 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:12:25 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:12:25 - main - INFO - ==================================================
2025-09-28 04:12:25 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:12:25 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:12:25 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:12:25 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:12:25 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:12:25 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:12:25 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:12:25 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:12:25 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:12:25 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:12:25 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:12:36 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_curriculum, stream: False
2025-09-28 04:12:36 - service.core.mentor_service - INFO - 🤖 질문 처리: 융합 커리큘럼 설계해주세요...
2025-09-28 04:12:36 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '융합 커리큘럼 설계해주세요...'
2025-09-28 04:12:36 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:12:36 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-c6136d3c-c456-4e01-9a73-37179184add6', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n융합 커리큘럼 설계해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:12:36 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:12:36 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:12:36 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5c6e4d0>
2025-09-28 04:12:36 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fe3b6343c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:12:36 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5c361d0>
2025-09-28 04:12:36 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:36 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:36 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:36 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:36 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:12:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2403'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2425'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998117'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_b3488e03afef4792a8ad320a5d1e4de8'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=qQU46IqtdZ_N2vk.5YYJHDq5hTuoLZEYchgpa50qTjs-1759000358-1.0.1.1-b3aAA.Fb_ieYQHOdbiicZVIR2iZY5VxDUxktcoU8mYCV5eNaSQ_yZGIg1jgz2CG1kH09MrVq2B5EbRREB7pNrrLT.HKKGoiRiwcT3XZpa4I; path=/; expires=Sat, 27-Sep-25 19:42:38 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=ztt6y26U7EBNy9iy.YOQNU.PI7jrr_nIqH58sDBl_jQ-1759000358638-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d50413dcd3277-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:12:38 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:38 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:12:38 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '2403'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '2425'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998117'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_b3488e03afef4792a8ad320a5d1e4de8'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=qQU46IqtdZ_N2vk.5YYJHDq5hTuoLZEYchgpa50qTjs-1759000358-1.0.1.1-b3aAA.Fb_ieYQHOdbiicZVIR2iZY5VxDUxktcoU8mYCV5eNaSQ_yZGIg1jgz2CG1kH09MrVq2B5EbRREB7pNrrLT.HKKGoiRiwcT3XZpa4I; path=/; expires=Sat, 27-Sep-25 19:42:38 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=ztt6y26U7EBNy9iy.YOQNU.PI7jrr_nIqH58sDBl_jQ-1759000358638-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d50413dcd3277-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:12:38 - openai._base_client - DEBUG - request_id: req_b3488e03afef4792a8ad320a5d1e4de8
2025-09-28 04:12:38 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 721자 텍스트
2025-09-28 04:12:38 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 709자, 7개 필드
2025-09-28 04:12:38 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:12:38 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:12:38 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:12:38 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '융합 커리큘럼 설계해주세요'
2025-09-28 04:12:38 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '융합 커리큘럼 설계해주세요

[확장정보] 배경정보: Looking for information on designing an integrated curriculum, possibly involving multiple departments or interdisciplinary studies. | 관련키워드: 융합, 커리큘럼, 설계, 통합교육, 학제간, 교육과정'
2025-09-28 04:12:38 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-e0d6d591-70c0-4292-891b-e1585bee7828', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드:\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업"\n  → Vector Search 또는 SQL Agent 사용\n\n- 융합 커리큘럼 키워드:\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵"\n  → Curriculum Agent 사용\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 과목/강의/수업 추천 키워드 → FAISS 또는 SQL (단일 전공)\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},\n    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:12:38 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:38 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:12:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'7418'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'7435'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998802'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_f03772d63fb44bc1bc1e2d7b859d8f7d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d505198453277-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:12:46 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:46 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:12:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '7418', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '7435', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998802', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_f03772d63fb44bc1bc1e2d7b859d8f7d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d505198453277-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:12:46 - openai._base_client - DEBUG - request_id: req_f03772d63fb44bc1bc1e2d7b859d8f7d
2025-09-28 04:12:46 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1823자 텍스트
2025-09-28 04:12:46 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:12:46 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:12:46 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:12:46 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:12:46 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:12:46 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:12:46 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (10.28초)
2025-09-28 04:12:46 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:12:46 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '융합 커리큘럼 설계해주세요...'
2025-09-28 04:12:46 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:12:46 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5c3f510>
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:46 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:45 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9981'), (b'content-type', b'application/json')])
2025-09-28 04:12:49 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:49 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:12:49 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:12:49 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b16c90>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 19:12:48 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 04:12:49 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 500 Internal Server Error"
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:49 - handlers.base_handler - ERROR - API 오류: 500
2025-09-28 04:12:49 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:12:49 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b17fd0>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:49 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:12:50 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:48 GMT'), (b'server', b'uvicorn'), (b'content-length', b'60'), (b'content-type', b'application/json')])
2025-09-28 04:12:50 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:12:50 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:12:50 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:12:50 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:12:50 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:12:50 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 융합 커리큘럼 설계해주세요
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='융합 커리큘럼 설계해주세요', additional_kwargs={}, response_metadata={}, id='49c8f5f7-e30c-4d34-8c32-6dd1828e71c3')], 'user_query': '융합 커리큘럼 설계해주세요', 'session_id': 'test_curriculum', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7fe3fd2c8490>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '컴공 별칭 감지 → Mapping 먼저', 'expanded_query': '융합 커리큘럼 설계해주세요\n\n[확장정보] 배경정보: Looking for information on designing an integrated curriculum, possibly involving multiple departments or interdisciplinary studies. | 관련키워드: 융합, 커리큘럼, 설계, 통합교육, 학제간, 교육과정', 'keywords': '융합,커리큘럼,설계,통합교육,학제간,교육과정', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 10.278541326522827}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO -   📝 쿼리: 융합 커리큘럼 설계해주세요
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO -   🎯 세션 ID: test_curriculum
2025-09-28 04:12:50 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:12:51 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:12:51 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:12:51 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b2d950>
2025-09-28 04:12:51 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:12:51 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:12:51 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:12:51 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:12:51 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:13:07 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:12:50 GMT'), (b'server', b'uvicorn'), (b'content-length', b'7459'), (b'content-type', b'application/json')])
2025-09-28 04:13:07 - httpx - INFO - HTTP Request: POST http://curriculum:7996/chat "HTTP/1.1 200 OK"
2025-09-28 04:13:07 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:13:07 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:13:07 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:13:07 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - 📨 HTTP 응답 수신: 200
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - ✅ JSON 파싱 성공
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - 📄 응답 메시지 길이: 3377자
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 처리 성공
2025-09-28 04:13:07 - httpcore.connection - DEBUG - close.started
2025-09-28 04:13:07 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - 📡 커리큘럼 서비스 응답: {'success': True, 'message': '쿼리: 융합 커리큘럼 설계해주세요\n\n1. 최종 학습 목표: 다양한 학문 분야의 지식을 통합하여 새로운 교육 프로그램을 설계하고 싶습니다.\n2. 진로 목표: 학문 간 융합을 통해 혁신적인 교육 커리큘럼을 개발하고, 이를 통해 교육의 질을 향상시키는 전문가로 활동하고 싶습니다.\n3. 직업 분야: 교육 커리큘럼 개발 및 교육 혁신.\n4. 직업: 교육 커리큘럼 디자이너.\n\n최종 쿼리: 교육 커리큘럼 디자이너.\n\n정의: 교육 커리큘럼 디자이너는 다양한 학문 분야의 지식과 교육 이론을 융합하여 혁신적이고 효과적인 교육 프로그램을 설계하는 전문가이다. 학생들의 학습 경험을 극대화하고, 교육 목표를 달성할 수 있도록 커리큘럼을 개발하고 평가한다.\n\n주요 역할:\n- 교육 프로그램 설계 및 개발\n  - 학습 목표 설정 및 교육 과정 구조화\n  - 다양한 학문 분야의 콘텐츠 통합 및 조정\n  - 교육 방법론 및 평가 기준 개발\n\n- 학문 간 융합 및 혁신적 교육 방법론 연구\n  - STEM, 인문학, 예술 등 다양한 분야의 융합 교육 프로그램 개발\n  - 프로젝트 기반 학습(PBL), 문제 해결 학습(Problem-Based Learning) 등 혁신적 교육 방법론 적용\n  - 디지털 도구 및 온라인 플랫폼을 활용한 하이브리드 교육 모델 설계\n\n- 교육 효과성 평가 및 개선\n  - 학습자 피드백 및 성과 분석을 통한 커리큘럼 개선\n  - 교육 프로그램의 효과성 및 효율성 평가\n  - 최신 교육 트렌드 및 기술을 반영한 지속적 업데이트\n\n추출된 기술 또는 지식:\n- 기술: 교육 프로그램 설계, 학문 간 융합, 교육 방법론 개발\n- 지식: 교육학, 학습 이론, 평가 방법론\n\n추론된 기술:\n1. 교육 프로그램 설계 및 개발 능력\n  - 교육 목표 및 학습 성과 설정\n  - 교육 과정의 단계적 설계 및 콘텐츠 개발\n  - 학습자 중심의 교육 환경 조성\n\n2. 학문 간 융합 및 통합적 사고\n  - 다양한 학문 분야의 지식 통합 및 응용\n  - 창의적 문제 해결 및 비판적 사고 능력\n  - 융합 교육을 위한 협업 및 커뮤니케이션 기술\n\n3. 혁신적 교육 방법론 적용\n  - 프로젝트 기반 학습(PBL) 및 문제 해결 학습(Problem-Based Learning) 설계\n  - 디지털 도구 및 온라인 학습 플랫폼 활용\n  - 학습자 참여를 유도하는 인터랙티브 교육 기법 개발\n\n4. 교육 효과성 평가 및 피드백 분석\n  - 학습자 성과 및 피드백 분석을 통한 커리큘럼 개선\n  - 교육 프로그램의 지속적 평가 및 업데이트\n  - 데이터 기반의 교육 효과성 측정 및 보고\n\n5. 실무에서 활용되는 교육 기술 및 툴\n  - 교육 콘텐츠 개발 툴(Camtasia, Articulate Storyline 등)\n  - 온라인 학습 관리 시스템(LMS) 활용(Moodle, Blackboard 등)\n  - 데이터 분석 및 시각화 툴(Tableau, Excel 등)을 통한 교육 성과 분석\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n  - 교육학(Education) → 교육 이론 및 학습 원리\n  - 학습 이론(Learning Theories) → 학습자 동기 부여 및 참여 유도\n  - 평가 방법론(Assessment Methodologies) → 학습 성과 측정 및 평가\n\n2. 전문 지식 (Specialized Knowledge)\n  - 융합 교육(Cross-disciplinary Education) → 학문 간 통합 및 협업 전략\n  - 혁신적 교육 방법론(Innovative Pedagogies) → 프로젝트 기반 학습, 문제 해결 학습\n  - 디지털 교육 기술(Digital Education Technologies) → 온라인 학습 플랫폼 및 도구 활용\n\n3. 실무 지식 (Practical Knowledge)\n  - 교육 콘텐츠 개발 및 관리 → 교육 자료 제작 및 업데이트\n  - 학습자 피드백 및 성과 분석 → 교육 프로그램 개선을 위한 데이터 활용\n  - 교육 트렌드 및 기술 동향 파악 → 최신 교육 혁신 사례 연구 및 적용\n\n=== 융합기술공학부(IT융합기전공학) ===\n강좌명: 창의적종합설계\n3학년 1학기\n선수과목: \n강좌명: 프로젝트랩기초종합설계\n3학년 2학기\n선수과목: 창의적종합설계\n강좌명: 프로젝트랩종합설계 1\n4학년 1학기\n선수과목: 프로젝트랩기초종합설계\n강좌명: 컴퓨터응용제도및설계\n2학년 1학기\n선수과목: \n강좌명: 프로젝트랩종합설계 2\n4학년 2학기\n선수과목: \n강좌명: 프로젝트랩응용종합설계\n4학년 1학기\n선수과목: 프로젝트랩기초종합설계\n강좌명: 차량용임베디드시스템\n3학년 2학기\n선수과목: 메카트로닉스\n강좌명: CAD및실습\n2학년 2학기\n선수과목: 컴퓨터응용제도및설계\n\n=== 문헌정보학과 ===\n강좌명: 디지털도서관론\n3학년 1학기\n선수과목: 문헌정보학입문, 정보서비스론\n강좌명: 디지털도서관기술과실제\n3학년 2학기\n선수과목: 디지털도서관론\n강좌명: 컴퓨터정보처리\n2학년 1학기\n선수과목: 문헌정보학입문\n강좌명: 데이터베이스론\n2학년 2학기\n선수과목: 웹DB탐색\n강좌명: 문화컨텐츠서비스론\n3학년 1학기\n선수과목: \n강좌명: 독서교육론\n2학년 1학기\n선수과목: 문헌정보학입문\n강좌명: 문화콘텐츠관리기술\n3학년 2학기\n선수과목: 문화컨텐츠서비스론\n\n=== 아동학과 ===\n강좌명: 부부교육\n4학년 2학기\n선수과목: 가족관계론\n강좌명: 영유아보육프로그램과교구개발\n4학년 1학기\n선수과목: 보육과정\n강좌명: 보육과정\n2학년 1학기\n선수과목: \n강좌명: 부모교육론\n4학년 1학기\n선수과목: 가족관계론\n강좌명: 정원설계\n2학년 2학기\n선수과목: \n강좌명: 지형설계\n3학년 1학기\n선수과목: 측량학 및 실습, 조경공학\n강좌명: 측량학및실습\n2학년 1학기\n선수과목: \n강좌명: 조경공학\n2학년 2학기\n선수과목: 측량학 및 실습\n강좌명: 가족생활교육\n3학년 1학기\n선수과목: 가족관계론\n강좌명: 영유아디지털리터러시\n3학년 2학기\n선수과목: 영유아발달\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 게임및혼합현실\n4학년 1학기\n선수과목: 컴퓨터그래픽스\n\n=== 융합기술공학부(IT응용시스템공학) ===\n강좌명: 센서공학\n4학년 2학기\n선수과목: 전기전자기초실험\n강좌명: 표준조명공학\n3학년 2학기\n선수과목: \n강좌명: 고급프로그래밍언어\n2학년 1학기\n선수과목: \n강좌명: 창의적공학설계\n4학년 2학기\n선수과목: 창의적공학설계입문, 전자시스템설계\n강좌명: 멀티미디어시스템\n4학년 2학기\n선수과목: 자바프로그래밍', 'service': 'curriculum', 'query': '융합 커리큘럼 설계해주세요'}
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 응답 성공: 3377자 응답
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - 📄 응답 미리보기: 쿼리: 융합 커리큘럼 설계해주세요

1. 최종 학습 목표: 다양한 학문 분야의 지식을 통합하여 새로운 교육 프로그램을 설계하고 싶습니다.
2. 진로 목표: 학문 간 융합을 통해 혁신적인 교육 커리큘럼을 개발하고, 이를 통해 교육의 질을 향상시키는 전문가로 활동하고 싶습니다.
3. 직업 분야: 교육 커리큘럼 개발 및 교육 혁신.
4. 직업: 교육 커리큘럼 디...
2025-09-28 04:13:07 - handlers.curriculum_handler - INFO - ============================================================
2025-09-28 04:13:07 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] curriculum 검색 완료
2025-09-28 04:13:07 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 3개 단계 성공
2025-09-28 04:13:07 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (21.60초)
2025-09-28 04:13:07 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:13:07 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:13:07 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:13:07 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:13:07 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:13:07 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:13:21 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test_db, stream: False
2025-09-28 04:13:21 - service.core.mentor_service - INFO - 🤖 질문 처리: 데이터베이스 관련 과목 추천해주세요...
2025-09-28 04:13:21 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '데이터베이스 관련 과목 추천해주세요...'
2025-09-28 04:13:21 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:13:21 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-97ef5dfc-01c2-4e2a-ae52-8f493e037a01', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n데이터베이스 관련 과목 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:13:21 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:13:21 - httpcore.connection - DEBUG - close.started
2025-09-28 04:13:21 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:13:21 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:13:21 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5ca4a90>
2025-09-28 04:13:21 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fe3b6343c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:13:21 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5b2fcd0>
2025-09-28 04:13:21 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:13:21 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:13:21 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:13:21 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:13:21 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:13:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2528'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2557'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998113'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_3fce3c4753e2452aa64dc9aa7b4b70dd'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d515c68e9aa72-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:13:24 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:13:24 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:13:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2528', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2557', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998113', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_3fce3c4753e2452aa64dc9aa7b4b70dd', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d515c68e9aa72-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:13:24 - openai._base_client - DEBUG - request_id: req_3fce3c4753e2452aa64dc9aa7b4b70dd
2025-09-28 04:13:24 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 662자 텍스트
2025-09-28 04:13:24 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 650자, 7개 필드
2025-09-28 04:13:24 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:13:24 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:13:24 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:13:24 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '데이터베이스 관련 과목 추천해주세요'
2025-09-28 04:13:24 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '데이터베이스 관련 과목 추천해주세요

[확장정보] 배경정보: Looking for courses related to databases in the Computer Science department. | 관련키워드: 데이터베이스, 데이터베이스시스템, 데이터관리, 컴퓨터공학과, 정보시스템'
2025-09-28 04:13:24 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-d0d97db6-54b3-42fe-b909-4dab26fe271b', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드:\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업"\n  → Vector Search 또는 SQL Agent 사용\n\n- 융합 커리큘럼 키워드:\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵"\n  → Curriculum Agent 사용\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 과목/강의/수업 추천 키워드 → FAISS 또는 SQL (단일 전공)\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},\n    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:13:24 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:13:24 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:13:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1160'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1179'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998802'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_8fd5a10d75ff470c85bc09168a387f3c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d516d99afaa72-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:13:25 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:13:25 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:13:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '1160', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1179', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998802', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_8fd5a10d75ff470c85bc09168a387f3c', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d516d99afaa72-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:13:25 - openai._base_client - DEBUG - request_id: req_8fd5a10d75ff470c85bc09168a387f3c
2025-09-28 04:13:25 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 223자 텍스트
2025-09-28 04:13:25 - utils.json_utils - WARNING - 완전한 JSON 객체를 찾을 수 없음, 정규식 방식으로 fallback
2025-09-28 04:13:25 - utils.json_utils - WARNING - JSON 패턴을 찾을 수 없음
2025-09-28 04:13:25 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: medium
2025-09-28 04:13:25 - service.nodes.routing_nodes - INFO - ✅ 라우팅: medium
2025-09-28 04:13:25 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (4.14초)
2025-09-28 04:13:25 - service.nodes.base_node - INFO - ⏱️ Light 노드 실행 시작
2025-09-28 04:13:25 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-53963d02-f08f-4466-8ba9-cdec3739d619', 'json_data': {'messages': [{'content': '데이터베이스 관련 과목 추천해주세요', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:13:25 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:13:25 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:13:31 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:13:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5341'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5363'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999985'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'0s'), (b'x-request-id', b'req_a4ae88b4218d40ae96e7b2ddaae20a77'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d51761e68aa72-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:13:31 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:13:31 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:13:31 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:13:31 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:13:31 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:13:31 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:13:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5341', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5363', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999985', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '0s', 'x-request-id': 'req_a4ae88b4218d40ae96e7b2ddaae20a77', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d51761e68aa72-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:13:31 - openai._base_client - DEBUG - request_id: req_a4ae88b4218d40ae96e7b2ddaae20a77
2025-09-28 04:13:31 - service.nodes.base_node - INFO - ✅ Light 노드 완료 (5.65초)
2025-09-28 04:13:31 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:13:31 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:13:31 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:13:31 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:13:31 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:13:31 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:15:14 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test, stream: False
2025-09-28 04:15:14 - service.core.mentor_service - INFO - 🤖 질문 처리: 데이터베이스 관련 과목 추천해주세요...
2025-09-28 04:15:14 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '데이터베이스 관련 과목 추천해주세요...'
2025-09-28 04:15:14 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:15:14 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-e7a7b996-bac6-4366-9851-c750e721eaab', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n데이터베이스 관련 과목 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:15:14 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:15:14 - httpcore.connection - DEBUG - close.started
2025-09-28 04:15:14 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:15:14 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:15:14 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5b438d0>
2025-09-28 04:15:14 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fe3b6343c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:15:14 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5b43450>
2025-09-28 04:15:14 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:15:14 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:15:14 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:15:14 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:15:14 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:15:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'3314'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3326'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998113'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_a96ec3ff94664e9985b416d03fe1dacb'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d541e1967ea9e-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:15:17 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:15:17 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:15:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '3314', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '3326', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998113', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_a96ec3ff94664e9985b416d03fe1dacb', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d541e1967ea9e-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:15:17 - openai._base_client - DEBUG - request_id: req_a96ec3ff94664e9985b416d03fe1dacb
2025-09-28 04:15:17 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 668자 텍스트
2025-09-28 04:15:17 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 656자, 7개 필드
2025-09-28 04:15:17 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:15:17 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:15:17 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:15:17 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '데이터베이스 관련 과목 추천해주세요'
2025-09-28 04:15:17 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '데이터베이스 관련 과목 추천해주세요

[확장정보] 배경정보: Looking for courses related to databases in the Computer Science department. | 관련키워드: 데이터베이스, 데이터베이스시스템, 데이터관리, 컴퓨터공학과, 정보시스템, 데이터과학'
2025-09-28 04:15:17 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-95bad091-90fe-4621-84b2-f763bf480da8', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드:\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업"\n  → Vector Search 또는 SQL Agent 사용\n\n- 융합 커리큘럼 키워드:\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵"\n  → Curriculum Agent 사용\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 과목/강의/수업 추천 키워드 → FAISS 또는 SQL (단일 전공)\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},\n    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:15:17 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:15:17 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:15:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1305'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1317'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998802'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_815faa09ba9e4da9b08ccf579e9435e1'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d54340afbea9e-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:15:19 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:15:19 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:15:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '1305', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1317', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998802', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_815faa09ba9e4da9b08ccf579e9435e1', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d54340afbea9e-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:15:19 - openai._base_client - DEBUG - request_id: req_815faa09ba9e4da9b08ccf579e9435e1
2025-09-28 04:15:19 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 223자 텍스트
2025-09-28 04:15:19 - utils.json_utils - WARNING - 완전한 JSON 객체를 찾을 수 없음, 정규식 방식으로 fallback
2025-09-28 04:15:19 - utils.json_utils - WARNING - JSON 패턴을 찾을 수 없음
2025-09-28 04:15:19 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: medium
2025-09-28 04:15:19 - service.nodes.routing_nodes - INFO - ✅ 라우팅: medium
2025-09-28 04:15:19 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (5.04초)
2025-09-28 04:15:19 - service.nodes.base_node - INFO - ⏱️ Light 노드 실행 시작
2025-09-28 04:15:19 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-881446c5-eca0-4875-bcd1-5ce697b1a998', 'json_data': {'messages': [{'content': '데이터베이스 관련 과목 추천해주세요', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:15:19 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:15:19 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:15:25 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:15:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5992'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6011'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999985'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'0s'), (b'x-request-id', b'req_15b3bced879647ada50f2b955539cd82'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d543d7db0ea9e-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:15:25 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:15:25 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:15:25 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:15:25 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:15:25 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:15:25 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:15:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5992', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6011', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999985', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '0s', 'x-request-id': 'req_15b3bced879647ada50f2b955539cd82', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d543d7db0ea9e-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:15:25 - openai._base_client - DEBUG - request_id: req_15b3bced879647ada50f2b955539cd82
2025-09-28 04:15:25 - service.nodes.base_node - INFO - ✅ Light 노드 완료 (6.21초)
2025-09-28 04:15:25 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:15:25 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:15:25 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:15:25 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:15:25 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:15:25 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:15:48 - controller.agentController - INFO - 🚀 /agent endpoint called for session: test2, stream: False
2025-09-28 04:15:48 - service.core.mentor_service - INFO - 🤖 질문 처리: 융합 커리큘럼 설계해주세요...
2025-09-28 04:15:48 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '융합 커리큘럼 설계해주세요...'
2025-09-28 04:15:48 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:15:48 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-8bc65812-8b1e-4f8a-9dbb-d53899635f95', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n융합 커리큘럼 설계해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:15:48 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:15:48 - httpcore.connection - DEBUG - close.started
2025-09-28 04:15:48 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:15:48 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:15:48 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5c90110>
2025-09-28 04:15:48 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fe3b6343c80> server_hostname='api.openai.com' timeout=None
2025-09-28 04:15:48 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fe3b5c922d0>
2025-09-28 04:15:48 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:15:48 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:15:48 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:15:48 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:15:48 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:15:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'2632'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'2651'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998117'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_3e2b0102f14e482fb87a137a0b15a562'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d54f6cb9e30c1-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:15:51 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:15:51 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:15:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '2632', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '2651', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998117', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_3e2b0102f14e482fb87a137a0b15a562', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d54f6cb9e30c1-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:15:51 - openai._base_client - DEBUG - request_id: req_3e2b0102f14e482fb87a137a0b15a562
2025-09-28 04:15:51 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 709자 텍스트
2025-09-28 04:15:51 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 697자, 7개 필드
2025-09-28 04:15:51 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:15:51 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:15:51 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:15:51 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '융합 커리큘럼 설계해주세요'
2025-09-28 04:15:51 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '융합 커리큘럼 설계해주세요

[확장정보] 배경정보: Looking for information on designing an integrated curriculum that combines multiple academic disciplines. | 관련키워드: 융합, 커리큘럼, 설계, 통합교육, 학제간, 교육과정'
2025-09-28 04:15:51 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-743c90ff-5212-4ab5-b900-297c73172944', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## � 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드:\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업"\n  → Vector Search 또는 SQL Agent 사용\n\n- 융합 커리큘럼 키워드:\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵"\n  → Curriculum Agent 사용\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 과목/강의/수업 추천 키워드 → FAISS 또는 SQL (단일 전공)\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},\n    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:15:51 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:15:51 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:16:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'8625'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'8741'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998802'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_c2dac6622bee4467bb15d518f78c0afc'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d55089cfd30c1-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:16:00 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:16:00 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:16:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '8625', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '8741', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998802', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_c2dac6622bee4467bb15d518f78c0afc', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d55089cfd30c1-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:16:00 - openai._base_client - DEBUG - request_id: req_c2dac6622bee4467bb15d518f78c0afc
2025-09-28 04:16:00 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 1805자 텍스트
2025-09-28 04:16:00 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 696자, 11개 필드
2025-09-28 04:16:00 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:16:00 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:16:00 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:16:00 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:16:00 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:16:00 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (11.80초)
2025-09-28 04:16:00 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:16:00 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '융합 커리큘럼 설계해주세요...'
2025-09-28 04:16:00 - httpcore.connection - DEBUG - close.started
2025-09-28 04:16:00 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:16:00 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:16:00 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5ca4e10>
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:16:00 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:16:00 GMT'), (b'server', b'uvicorn'), (b'content-length', b'9981'), (b'content-type', b'application/json')])
2025-09-28 04:16:02 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:16:02 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:16:02 - httpcore.connection - DEBUG - close.started
2025-09-28 04:16:02 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:16:02 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:16:02 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b42050>
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:16:02 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'date', b'Sat, 27 Sep 2025 19:16:01 GMT'), (b'server', b'uvicorn'), (b'content-length', b'21'), (b'content-type', b'text/plain; charset=utf-8')])
2025-09-28 04:16:03 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 500 Internal Server Error"
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:16:03 - handlers.base_handler - ERROR - API 오류: 500
2025-09-28 04:16:03 - httpcore.connection - DEBUG - close.started
2025-09-28 04:16:03 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:16:03 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:16:03 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b3c950>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:16:02 GMT'), (b'server', b'uvicorn'), (b'content-length', b'60'), (b'content-type', b'application/json')])
2025-09-28 04:16:03 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:16:03 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 융합 커리큘럼 설계해주세요
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='융합 커리큘럼 설계해주세요', additional_kwargs={}, response_metadata={}, id='9c311f31-3b1a-4256-8fa6-c7417a13aeb4')], 'user_query': '융합 커리큘럼 설계해주세요', 'session_id': 'test2', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7fe3fd2c8490>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '컴공 별칭 감지 → Mapping 먼저', 'expanded_query': '융합 커리큘럼 설계해주세요\n\n[확장정보] 배경정보: Looking for information on designing an integrated curriculum that combines multiple academic disciplines. | 관련키워드: 융합, 커리큘럼, 설계, 통합교육, 학제간, 교육과정', 'keywords': '융합,커리큘럼,설계,통합교육,학제간,교육과정', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 11.795369863510132}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO -   📝 쿼리: 융합 커리큘럼 설계해주세요
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO -   🎯 세션 ID: test2
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:16:03 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:16:03 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:16:03 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fe3b5b3d910>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:16:03 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:16:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:16:03 GMT'), (b'server', b'uvicorn'), (b'content-length', b'6967'), (b'content-type', b'application/json')])
2025-09-28 04:16:24 - httpx - INFO - HTTP Request: POST http://curriculum:7996/chat "HTTP/1.1 200 OK"
2025-09-28 04:16:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:16:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:16:24 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:16:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - 📨 HTTP 응답 수신: 200
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - ✅ JSON 파싱 성공
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - 📄 응답 메시지 길이: 3052자
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 처리 성공
2025-09-28 04:16:24 - httpcore.connection - DEBUG - close.started
2025-09-28 04:16:24 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - 📡 커리큘럼 서비스 응답: {'success': True, 'message': '쿼리: 융합 커리큘럼 설계해주세요\n\n1. 최종 학습 목표: 다양한 학문 분야의 지식을 통합하여 새로운 교육 프로그램을 설계하고 싶습니다.\n2. 진로 목표: 학문 간 융합을 통해 혁신적인 교육 커리큘럼을 개발하고, 이를 통해 교육의 질을 향상시키는 전문가로 활동하고 싶습니다.\n3. 직업 분야: 교육 커리큘럼 개발 및 교육 혁신.\n4. 직업: 교육 커리큘럼 디자이너.\n\n최종 쿼리: 교육 커리큘럼 디자이너.\n\n정의: 교육 커리큘럼 디자이너는 다양한 학문 분야의 지식과 교육 이론을 융합하여 혁신적이고 효과적인 교육 프로그램을 설계하는 전문가이다. 학생들의 학습 경험을 극대화하고, 교육 목표를 달성할 수 있도록 커리큘럼을 개발하고 평가한다.\n\n주요 역할:\n- 교육 프로그램 설계 및 개발\n  - 학습 목표에 맞는 교육 콘텐츠 및 활동 설계\n  - 학문 간 융합을 통한 창의적 교육 방법론 개발\n  - 교육 과정의 구조 및 흐름을 체계적으로 구성\n\n- 교육 효과성 평가 및 개선\n  - 교육 프로그램의 효과성 평가를 위한 지표 설정\n  - 학생 피드백 및 성과 분석을 통한 커리큘럼 개선\n  - 최신 교육 트렌드 및 기술을 반영한 프로그램 업데이트\n\n- 교육 자료 및 리소스 개발\n  - 다양한 학습 자료(교재, 멀티미디어 콘텐츠 등) 제작\n  - 온라인 및 오프라인 교육 리소스 통합 관리\n  - 교육 기술 도구 활용을 통한 학습 경험 강화\n\n추출된 기술 또는 지식:\n- 기술: 교육 프로그램 설계, 학문 간 융합, 교육 효과성 평가\n- 지식: 교육 이론, 학습 심리학, 교육 기술\n\n추론된 기술:\n1. 교육 프로그램 설계 및 학문 융합\n  - 교육 목표 설정 및 학습 성과 기반 커리큘럼 설계\n  - 학문 간 융합을 통한 창의적 문제 해결 방법론 개발\n  - 교육 과정의 흐름 및 단계적 학습 경험 설계\n\n2. 교육 효과성 평가 및 피드백 분석\n  - 교육 프로그램의 성과 측정 및 분석 기법\n  - 학생 피드백 수집 및 분석을 통한 커리큘럼 개선\n  - 교육 효과성 평가를 위한 데이터 기반 접근법\n\n3. 교육 자료 개발 및 기술 활용\n  - 멀티미디어 콘텐츠 제작 및 활용\n  - 온라인 학습 플랫폼 및 도구 활용\n  - 교육 기술(EdTech) 트렌드 및 도구 적용\n\n4. 실무에서 활용되는 교육 기술 및 툴\n  - 학습 관리 시스템(LMS) 활용 (Moodle, Blackboard 등)\n  - 교육 콘텐츠 제작 도구 (Articulate, Adobe Captivate)\n  - 데이터 분석 및 시각화 도구 (Tableau, Power BI)\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n  - 교육 이론 및 학습 심리학 → 학습자 중심 교육 설계\n  - 교육 평가 및 측정 → 교육 효과성 및 성과 분석\n  - 교육 철학 및 정책 → 교육 목표 및 방향성 설정\n\n2. 전문 지식 (Specialized Knowledge)\n  - 학문 융합 및 창의적 문제 해결 → 다양한 학문 분야의 통합적 접근\n  - 교육 혁신 및 트렌드 → 최신 교육 방법론 및 기술 적용\n  - 교육 리더십 및 관리 → 교육 프로그램 운영 및 관리 전략\n\n3. 실무 지식 (Practical Knowledge)\n  - 교육 자료 및 콘텐츠 개발 → 다양한 학습 자료 제작 및 활용\n  - 교육 기술 도구 활용 → 온라인 학습 플랫폼 및 도구 적용\n  - 교육 커뮤니케이션 및 협업 → 교육자 및 학습자 간의 효과적 소통 및 협력\n\n이와 같은 구조로 교육 커리큘럼 디자이너로서의 경력을 쌓고, 다양한 학문 분야의 지식을 융합하여 혁신적인 교육 프로그램을 설계할 수 있습니다.\n\n=== 문헌정보학과 ===\n강좌명: 디지털도서관론\n3학년 1학기\n선수과목: 문헌정보학입문, 정보서비스론\n강좌명: 디지털도서관기술과실제\n3학년 2학기\n선수과목: 디지털도서관론\n강좌명: 컴퓨터정보처리\n2학년 1학기\n선수과목: 문헌정보학입문\n강좌명: 데이터베이스론\n2학년 2학기\n선수과목: 웹DB탐색\n강좌명: 독서교육론\n2학년 1학기\n선수과목: 문헌정보학입문\n강좌명: 문화컨텐츠서비스론\n3학년 1학기\n선수과목: \n강좌명: 문화콘텐츠관리기술\n3학년 2학기\n선수과목: 문화컨텐츠서비스론\n강좌명: 문헌정보학입문\n1학년 2학기\n선수과목: \n강좌명: 정보자료조직연습\n4학년 2학기\n선수과목: 정보자료조직론 1, 정보자료조직론 2\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 게임및혼합현실\n4학년 1학기\n선수과목: 컴퓨터그래픽스\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 프로그래밍언어론\n3학년 1학기\n선수과목: 객체지향프로그래밍\n강좌명: 인체와의복\n1학년 2학기\n선수과목: -\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 인간-컴퓨터상호작용\n4학년 1학기\n선수과목: 소프트웨어공학\n강좌명: 데이터마이닝\n3학년 2학기\n선수과목: 인공지능\n\n=== 심리학과 ===\n강좌명: 직업과진로컨설팅\n3학년 2학기\n선수과목: 산업및조직심리학\n강좌명: 산업및조직심리학\n3학년 1학기\n선수과목: 사회심리학\n강좌명: 심리통계\n2학년 1학기\n선수과목: 일반심리학\n강좌명: 상담이론\n3학년 1학기\n선수과목: 심리학연구방법론\n강좌명: 광고심리학\n2학년 2학기\n선수과목: 소비자심리학\n강좌명: 상담심리학및실습\n3학년 2학기\n선수과목: 상담이론\n강좌명: 소비자심리학\n2학년 1학기\n선수과목: 일반심리학\n강좌명: 무역상무론\n2학년 1학기\n선수과목: 무역학의 이해\n강좌명: 응용사회심리학\n4학년 2학기\n선수과목: 사회심리학\n\n=== 농축산식품융합학과 ===\n강좌명: 농업교육론\n3학년 1학기\n선수과목: \n\n=== 생명자원융합학과 ===\n강좌명: 농업교육론\n3학년 1학기\n선수과목: \n강좌명: 목공레크레이션\n2학년 2학기\n선수과목: 경관자원론', 'service': 'curriculum', 'query': '융합 커리큘럼 설계해주세요'}
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 응답 성공: 3052자 응답
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - 📄 응답 미리보기: 쿼리: 융합 커리큘럼 설계해주세요

1. 최종 학습 목표: 다양한 학문 분야의 지식을 통합하여 새로운 교육 프로그램을 설계하고 싶습니다.
2. 진로 목표: 학문 간 융합을 통해 혁신적인 교육 커리큘럼을 개발하고, 이를 통해 교육의 질을 향상시키는 전문가로 활동하고 싶습니다.
3. 직업 분야: 교육 커리큘럼 개발 및 교육 혁신.
4. 직업: 교육 커리큘럼 디...
2025-09-28 04:16:24 - handlers.curriculum_handler - INFO - ============================================================
2025-09-28 04:16:24 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] curriculum 검색 완료
2025-09-28 04:16:24 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 3개 단계 성공
2025-09-28 04:16:24 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (23.47초)
2025-09-28 04:16:24 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:16:24 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:16:24 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:16:24 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:16:24 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:16:24 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:24:14 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:24:14 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:24:14 - main - INFO - ==================================================
2025-09-28 04:24:14 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:24:14 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:24:14 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:24:14 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:24:14 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:24:14 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:24:14 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:24:14 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:24:14 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:24:14 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:24:14 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:34:20 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:34:20 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:34:20 - main - INFO - ==================================================
2025-09-28 04:34:20 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:34:20 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:34:20 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:34:20 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:34:20 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:34:20 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:34:20 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:34:20 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:34:20 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:34:20 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:34:20 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:34:40 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:34:40 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 과목 추천해주세요...
2025-09-28 04:34:40 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 과목 추천해주세요...'
2025-09-28 04:34:40 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:34:40 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-71ebcfec-11ce-4ff1-930d-0492666ed699', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 과목 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:34:40 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:34:40 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:34:40 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f79c5b093d0>
2025-09-28 04:34:40 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f79c61abe30> server_hostname='api.openai.com' timeout=None
2025-09-28 04:34:40 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f79c6087f10>
2025-09-28 04:34:40 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:40 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:40 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:40 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:40 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:34:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1755'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1901'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998115'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_b2e03dbe1c5746d196a8b58fbb1a3540'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=_921RTEk7Spsehixm9NXcTJBGiUN9SiEIQUVKtLbed0-1759001682-1.0.1.1-BjSVHcksvtaOPXj8y4_jiT6i0LEDsUL8JYvw1NWut_fk6dzueYwnB8Oi3d6.Ek2XzocaWbVkkGvv9R43uYNj_sBbiXBQ92MieLHmIuiuPVU; path=/; expires=Sat, 27-Sep-25 20:04:42 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=ygMCw3lUTuBMjbsevMovus4h6AYVPQSfbLpBzDHw46U-1759001682340-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d7094c9170d05-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:34:42 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:34:42 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:34:42 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '1755'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1901'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998115'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_b2e03dbe1c5746d196a8b58fbb1a3540'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=_921RTEk7Spsehixm9NXcTJBGiUN9SiEIQUVKtLbed0-1759001682-1.0.1.1-BjSVHcksvtaOPXj8y4_jiT6i0LEDsUL8JYvw1NWut_fk6dzueYwnB8Oi3d6.Ek2XzocaWbVkkGvv9R43uYNj_sBbiXBQ92MieLHmIuiuPVU; path=/; expires=Sat, 27-Sep-25 20:04:42 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=ygMCw3lUTuBMjbsevMovus4h6AYVPQSfbLpBzDHw46U-1759001682340-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d7094c9170d05-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:34:42 - openai._base_client - DEBUG - request_id: req_b2e03dbe1c5746d196a8b58fbb1a3540
2025-09-28 04:34:42 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 647자 텍스트
2025-09-28 04:34:42 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 635자, 7개 필드
2025-09-28 04:34:42 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:34:42 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:34:42 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:34:42 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 과목 추천해주세요'
2025-09-28 04:34:42 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 과목 추천해주세요

[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:34:42 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-fcf99684-b797-48be-bb50-8697c11758ad', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## 🚨 STRICT JSON RESPONSE REQUIREMENT\n**YOU MUST RESPOND ONLY WITH VALID JSON. NO EXPLANATION, NO COMMENTS, NO EXTRA TEXT.**\n**START YOUR RESPONSE WITH { AND END WITH }**\n\n## 🔥 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드:\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업"\n  → Vector Search 또는 SQL Agent 사용\n\n- 융합 커리큘럼 키워드:\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵"\n  → Curriculum Agent 사용\n\n[라우팅 우선순위]\n1) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 과목/강의/수업 추천 키워드 → FAISS 또는 SQL (단일 전공)\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},\n    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}\n\n## 🚨 FINAL REMINDER: RESPOND ONLY WITH JSON\nQuery: 컴퓨터공학과 과목 추천해주세요\n\n[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어\n\n**CRITICAL**: Your response must be ONLY valid JSON following the schema above. NO explanations, NO comments. Start with { and end with }.', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:34:42 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:42 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:34:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'6660'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6684'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998641'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_7bb6a847595c47bdbae89afaab0da65f'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d70a2bb2e0d05-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:34:49 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:34:49 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:34:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '6660', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '6684', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998641', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_7bb6a847595c47bdbae89afaab0da65f', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d70a2bb2e0d05-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:34:49 - openai._base_client - DEBUG - request_id: req_7bb6a847595c47bdbae89afaab0da65f
2025-09-28 04:34:49 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 라우터 응답: ```json
{
  "complexity": "heavy",
  "owner_hint": "DEPARTMENT_MAPPING+FAISS_SEARCH",
  "category": "course_lookup",
  "question_type": "CourseRecommendation",
  "data_source": "DB",
  "reasoning": "과목 추천 키워드 → FAISS 검색",
  "plan": [
    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "학과명 정규화"},
    {"step": 2, "agent": "FAISS-Search-Agent", "goal": "과목 추천"}
  ],
  "complexity_level": "heavy",
  "execution_type": "sequential",
  "steps": [
    {"id": "step_1", "type": "department_mapping", "input": "컴퓨터공학과", "description": "학과명 정규화"},
    {"id": "step_2", "type": "vector_search", "input": "정규화된 학과명", "description": "과목 추천"}
  ],
  "dependencies": {
    "step_2": ["step_1"]
  }
}
```
2025-09-28 04:34:49 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 701자 텍스트
2025-09-28 04:34:49 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 689자, 11개 필드
2025-09-28 04:34:49 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:34:49 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=heavy, score=6
2025-09-28 04:34:49 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=heavy, score=6
2025-09-28 04:34:49 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 추출된 JSON: {'complexity': 'heavy', 'owner_hint': 'DEPARTMENT_MAPPING+FAISS_SEARCH', 'category': 'course_lookup', 'question_type': 'CourseRecommendation', 'data_source': 'DB', 'reasoning': '과목 추천 키워드 → FAISS 검색', 'plan': [{'step': 1, 'agent': 'Department-Mapping-Agent', 'goal': '학과명 정규화'}, {'step': 2, 'agent': 'FAISS-Search-Agent', 'goal': '과목 추천'}], 'complexity_level': 'heavy', 'execution_type': 'sequential', 'steps': [{'id': 'step_1', 'type': 'department_mapping', 'input': '컴퓨터공학과', 'description': '학과명 정규화'}, {'id': 'step_2', 'type': 'vector_search', 'input': '정규화된 학과명', 'description': '과목 추천'}], 'dependencies': {'step_2': ['step_1']}}
2025-09-28 04:34:49 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 최종 결정: {'complexity': 'heavy', 'is_complex': True, 'category': 'course_lookup', 'owner_hint': 'DEPARTMENT_MAPPING+FAISS_SEARCH', 'plan': None, 'reasoning': '과목 추천 키워드 → FAISS 검색'}
2025-09-28 04:34:49 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: heavy
2025-09-28 04:34:49 - service.nodes.routing_nodes - INFO - ✅ 라우팅: heavy
2025-09-28 04:34:49 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (9.28초)
2025-09-28 04:34:49 - service.nodes.base_node - INFO - ⏱️ HeavySequential 노드 실행 시작
2025-09-28 04:34:49 - service.nodes.query_route.heavy_nodes - INFO - ⚡ [HEAVY_SEQUENTIAL] 복잡한 처리 시작: '컴퓨터공학과 과목 추천해주세요...'
2025-09-28 04:34:49 - httpcore.connection - DEBUG - connect_tcp.started host='tool-sql' port=7999 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:34:49 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f79c593ca90>
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:49 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:34:48 GMT'), (b'server', b'uvicorn'), (b'content-length', b'10052'), (b'content-type', b'application/json')])
2025-09-28 04:34:51 - httpx - INFO - HTTP Request: POST http://tool-sql:7999/api/v1/agent "HTTP/1.1 200 OK"
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:34:51 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] sql 검색 완료
2025-09-28 04:34:51 - httpcore.connection - DEBUG - connect_tcp.started host='vector-search' port=7997 local_address=None timeout=30.0 socket_options=None
2025-09-28 04:34:51 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f79c596f510>
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:51 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:34:51 GMT'), (b'server', b'uvicorn'), (b'content-length', b'14'), (b'content-type', b'application/json')])
2025-09-28 04:34:53 - httpx - INFO - HTTP Request: POST http://vector-search:7997/search "HTTP/1.1 200 OK"
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:34:53 - httpcore.connection - DEBUG - connect_tcp.started host='department-mapping' port=8000 local_address=None timeout=10.0 socket_options=None
2025-09-28 04:34:53 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f79c5990910>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:34:52 GMT'), (b'server', b'uvicorn'), (b'content-length', b'44'), (b'content-type', b'application/json')])
2025-09-28 04:34:53 - httpx - INFO - HTTP Request: POST http://department-mapping:8000/map "HTTP/1.1 200 OK"
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:34:53 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] dept 검색 완료
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 
============================================================
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 📚 커리큘럼 에이전트 처리 시작
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 📥 사용자 질문: 컴퓨터공학과 과목 추천해주세요
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 📊 쿼리 분석 데이터: {}
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🔧 추가 인자: {'messages': [HumanMessage(content='컴퓨터공학과 과목 추천해주세요', additional_kwargs={}, response_metadata={}, id='4729fbe8-4063-407c-ad9f-22d2c5abb3cc')], 'user_query': '컴퓨터공학과 과목 추천해주세요', 'session_id': 'default', 'conversation_memory': <service.memory.memory.ConversationMemory object at 0x7f7a0d134790>, 'route': 'heavy', 'complexity': 'heavy', 'plan': [], 'routing_reason': '과목 추천 키워드 → FAISS 검색', 'expanded_query': '컴퓨터공학과 과목 추천해주세요\n\n[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어', 'keywords': '컴퓨터공학과,컴공,프로그래밍,알고리즘,데이터구조,AI,머신러닝,소프트웨어', 'slots': {}, 'processing_type': None, 'final_result': None, 'step_times': {'router': 9.281454086303711}, 'retry_count': 0, 'parallel_tasks': []}
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🏥 서비스 상태: 정상
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🌐 베이스 URL: http://curriculum:7996
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 호출 시작
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🔄 커리큘럼 서비스 HTTP 통신 시작
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 📦 커리큘럼 서비스 요청 데이터:
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO -   📝 쿼리: 컴퓨터공학과 과목 추천해주세요
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO -   📊 요구 학과 수: 30
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO -   🎯 세션 ID: default
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 🌐 HTTP 요청: POST http://curriculum:7996/chat
2025-09-28 04:34:53 - handlers.curriculum_handler - INFO - 📡 HTTP 요청 전송 중...
2025-09-28 04:34:53 - httpcore.connection - DEBUG - connect_tcp.started host='curriculum' port=7996 local_address=None timeout=120.0 socket_options=None
2025-09-28 04:34:53 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7f79c5992150>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:34:53 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sat, 27 Sep 2025 19:34:52 GMT'), (b'server', b'uvicorn'), (b'content-length', b'6851'), (b'content-type', b'application/json')])
2025-09-28 04:35:07 - httpx - INFO - HTTP Request: POST http://curriculum:7996/chat "HTTP/1.1 200 OK"
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - 📨 HTTP 응답 수신: 200
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - ✅ JSON 파싱 성공
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - 📄 응답 메시지 길이: 2965자
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 처리 성공
2025-09-28 04:35:07 - httpcore.connection - DEBUG - close.started
2025-09-28 04:35:07 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - 📡 커리큘럼 서비스 응답: {'success': True, 'message': '쿼리: 컴퓨터공학과 과목 추천해주세요\n\n1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 통해 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.\n2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등 다양한 분야에서 전문성을 갖추고 싶습니다.\n3. 직업 분야: 소프트웨어 개발 및 컴퓨터 시스템 설계.\n4. 직업: 소프트웨어 엔지니어.\n\n최종 쿼리: 소프트웨어 엔지니어.\n\n정의: 소프트웨어 엔지니어는 컴퓨터 시스템 및 소프트웨어를 설계, 개발, 테스트, 유지보수하는 전문가로, 다양한 프로그래밍 언어와 기술을 활용하여 사용자 요구에 맞는 소프트웨어 솔루션을 제공합니다.\n\n주요 역할:\n- 소프트웨어 설계 및 개발\n- 사용자 요구 분석 및 시스템 요구사항 정의\n- 프로그래밍 언어를 활용한 소프트웨어 구현\n- 소프트웨어 테스트 및 디버깅\n\n- 시스템 설계 및 아키텍처 개발\n- 시스템 구조 설계 및 최적화\n- 데이터베이스 설계 및 관리\n- 네트워크 및 보안 시스템 설계\n\n- 프로젝트 관리 및 협업\n- 소프트웨어 개발 프로젝트 계획 및 일정 관리\n- 팀원 간의 협업 및 커뮤니케이션\n\n추출된 기술 또는 지식:\n- 기술: 프로그래밍, 소프트웨어 설계, 시스템 아키텍처\n- 지식: 컴퓨터공학 기초, 데이터베이스, 네트워크\n\n추론된 기술:\n1. 프로그래밍 언어 및 소프트웨어 개발\n- Python, Java, C++ 등 다양한 프로그래밍 언어 숙련\n- 객체지향 프로그래밍 및 함수형 프로그래밍 이해\n- 소프트웨어 개발 라이프사이클(SDLC) 및 애자일 방법론 적용\n\n2. 시스템 설계 및 데이터베이스 관리\n- 데이터베이스 관리 시스템(DBMS) 이해 및 SQL 활용\n- 클라우드 컴퓨팅 및 분산 시스템 설계\n- 시스템 성능 최적화 및 확장성 고려\n\n3. 네트워크 및 보안\n- 네트워크 프로토콜 및 인터넷 구조 이해\n- 정보 보안 원칙 및 암호화 기술 적용\n- 네트워크 보안 및 침입 탐지 시스템 설계\n\n4. 소프트웨어 테스트 및 품질 보증\n- 자동화 테스트 및 테스트 주도 개발(TDD) 방법론\n- 소프트웨어 품질 관리 및 버그 추적 시스템 활용\n- 사용자 경험(UX) 및 인터페이스(UI) 디자인 원칙 적용\n\n5. 실무에서 활용되는 툴 및 플랫폼\n- 버전 관리 시스템(Git, SVN) 활용\n- 통합 개발 환경(IDE) 및 코드 편집기 사용\n- 클라우드 서비스(AWS, Azure, Google Cloud) 활용\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n- 컴퓨터 과학 기초 → 알고리즘, 자료구조, 컴퓨터 아키텍처\n- 소프트웨어 공학 → 소프트웨어 개발 방법론 및 프로젝트 관리\n- 데이터베이스 시스템 → 데이터 모델링 및 쿼리 최적화\n\n2. 전문 지식 (Specialized Knowledge)\n- 인공지능 및 머신러닝 → 데이터 분석 및 예측 모델링\n- 분산 시스템 및 클라우드 컴퓨팅 → 대규모 시스템 설계 및 운영\n- 사이버 보안 → 보안 위협 분석 및 대응 전략\n\n3. 실무 지식 (Practical Knowledge)\n- 소프트웨어 개발 툴 및 환경 설정 → DevOps, CI/CD 파이프라인 구축\n- 사용자 인터페이스 및 경험 디자인 → UX/UI 디자인 원칙 및 도구 활용\n- 프로젝트 관리 및 협업 툴 → Jira, Trello, Slack 등 활용\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 기초회로실험\n2학년 2학기\n선수과목: 창의적공학설계입문,회로이론 1\n강좌명: 전자회로실험\n3학년 1학기\n선수과목: 전자회로 1\n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 정보검색\n4학년 2학기\n선수과목: 데이터베이스\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 데이터마이닝\n3학년 2학기\n선수과목: 인공지능\n강좌명: 수치해석및최적화\n3학년 1학기\n선수과목: 선형대수학\n강좌명: 데이터베이스\n3학년 1학기\n선수과목: 자료구조\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 인공지능\n3학년 1학기\n선수과목: 알고리즘, 확률및통계\n강좌명: 컴퓨터비전\n4학년 1학기\n선수과목: 인공지능, 기계학습\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 논리설계\n강좌명: 시스템보안\n4학년 2학기\n선수과목: 운영체제\n\n=== 소프트웨어공학과 ===\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 소프트웨어공학개론 1\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학캡스톤프로젝트\n4학년 1학기\n선수과목: 소프트웨어시스템분석및설계, 소프트웨어도메인모델링\n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: 해당없음\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 디지털공학\n강좌명: 창의적공학설계입문\n1학년 2학기\n선수과목: \n강좌명: 소프트웨어품질및테스팅\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계, 소스코드분석\n강좌명: 소프트웨어시스템분석및설계\n3학년 2학기\n선수과목: 소프트웨어공학개론, 소프트웨어개발프로세스\n강좌명: 소프트웨어보안\n4학년 1학기\n선수과목: 운영체제\n강좌명: 소프트웨어아키텍처이론과실제\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계\n강좌명: 데이터사이언스\n2학년 2학기\n선수과목: Python 프로그래밍 1\n강좌명: 고급웹프로그래밍\n3학년 2학기\n선수과목: 웹프로그래밍\n강좌명: C++프로그래밍\n1학년 2학기\n선수과목: \n강좌명: 컴퓨팅문제와알고리즘\n3학년 2학기\n선수과목: 알고리즘', 'service': 'curriculum', 'query': '컴퓨터공학과 과목 추천해주세요'}
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - ✅ 커리큘럼 응답 성공: 2965자 응답
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - 📄 응답 미리보기: 쿼리: 컴퓨터공학과 과목 추천해주세요

1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 통해 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.
2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등 다양한 분야에서 전문성을 갖추고 싶습니다.
3. 직업 분야: 소프트웨어 개발 및 컴퓨터 시스템 설계.
4. 직업: ...
2025-09-28 04:35:07 - handlers.curriculum_handler - INFO - ============================================================
2025-09-28 04:35:07 - service.nodes.query_route.heavy_nodes - INFO - ✅ [HEAVY] curriculum 검색 완료
2025-09-28 04:35:07 - service.nodes.query_route.heavy_nodes - INFO - 🎯 [HEAVY] 순차 처리 완료: 3개 단계 성공
2025-09-28 04:35:07 - service.nodes.base_node - INFO - ✅ HeavySequential 노드 완료 (18.45초)
2025-09-28 04:35:07 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:35:07 - service.nodes.synthesis_nodes - INFO - 🔍 [DEBUG] 슬롯 내용: {'sql': '조회 결과를 가져올 수 없습니다.', 'dept': '학과를 찾을 수 없습니다.', 'curriculum': '쿼리: 컴퓨터공학과 과목 추천해주세요\n\n1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 통해 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.\n2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등 다양한 분야에서 전문성을 갖추고 싶습니다.\n3. 직업 분야: 소프트웨어 개발 및 컴퓨터 시스템 설계.\n4. 직업: 소프트웨어 엔지니어.\n\n최종 쿼리: 소프트웨어 엔지니어.\n\n정의: 소프트웨어 엔지니어는 컴퓨터 시스템 및 소프트웨어를 설계, 개발, 테스트, 유지보수하는 전문가로, 다양한 프로그래밍 언어와 기술을 활용하여 사용자 요구에 맞는 소프트웨어 솔루션을 제공합니다.\n\n주요 역할:\n- 소프트웨어 설계 및 개발\n- 사용자 요구 분석 및 시스템 요구사항 정의\n- 프로그래밍 언어를 활용한 소프트웨어 구현\n- 소프트웨어 테스트 및 디버깅\n\n- 시스템 설계 및 아키텍처 개발\n- 시스템 구조 설계 및 최적화\n- 데이터베이스 설계 및 관리\n- 네트워크 및 보안 시스템 설계\n\n- 프로젝트 관리 및 협업\n- 소프트웨어 개발 프로젝트 계획 및 일정 관리\n- 팀원 간의 협업 및 커뮤니케이션\n\n추출된 기술 또는 지식:\n- 기술: 프로그래밍, 소프트웨어 설계, 시스템 아키텍처\n- 지식: 컴퓨터공학 기초, 데이터베이스, 네트워크\n\n추론된 기술:\n1. 프로그래밍 언어 및 소프트웨어 개발\n- Python, Java, C++ 등 다양한 프로그래밍 언어 숙련\n- 객체지향 프로그래밍 및 함수형 프로그래밍 이해\n- 소프트웨어 개발 라이프사이클(SDLC) 및 애자일 방법론 적용\n\n2. 시스템 설계 및 데이터베이스 관리\n- 데이터베이스 관리 시스템(DBMS) 이해 및 SQL 활용\n- 클라우드 컴퓨팅 및 분산 시스템 설계\n- 시스템 성능 최적화 및 확장성 고려\n\n3. 네트워크 및 보안\n- 네트워크 프로토콜 및 인터넷 구조 이해\n- 정보 보안 원칙 및 암호화 기술 적용\n- 네트워크 보안 및 침입 탐지 시스템 설계\n\n4. 소프트웨어 테스트 및 품질 보증\n- 자동화 테스트 및 테스트 주도 개발(TDD) 방법론\n- 소프트웨어 품질 관리 및 버그 추적 시스템 활용\n- 사용자 경험(UX) 및 인터페이스(UI) 디자인 원칙 적용\n\n5. 실무에서 활용되는 툴 및 플랫폼\n- 버전 관리 시스템(Git, SVN) 활용\n- 통합 개발 환경(IDE) 및 코드 편집기 사용\n- 클라우드 서비스(AWS, Azure, Google Cloud) 활용\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n- 컴퓨터 과학 기초 → 알고리즘, 자료구조, 컴퓨터 아키텍처\n- 소프트웨어 공학 → 소프트웨어 개발 방법론 및 프로젝트 관리\n- 데이터베이스 시스템 → 데이터 모델링 및 쿼리 최적화\n\n2. 전문 지식 (Specialized Knowledge)\n- 인공지능 및 머신러닝 → 데이터 분석 및 예측 모델링\n- 분산 시스템 및 클라우드 컴퓨팅 → 대규모 시스템 설계 및 운영\n- 사이버 보안 → 보안 위협 분석 및 대응 전략\n\n3. 실무 지식 (Practical Knowledge)\n- 소프트웨어 개발 툴 및 환경 설정 → DevOps, CI/CD 파이프라인 구축\n- 사용자 인터페이스 및 경험 디자인 → UX/UI 디자인 원칙 및 도구 활용\n- 프로젝트 관리 및 협업 툴 → Jira, Trello, Slack 등 활용\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 기초회로실험\n2학년 2학기\n선수과목: 창의적공학설계입문,회로이론 1\n강좌명: 전자회로실험\n3학년 1학기\n선수과목: 전자회로 1\n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 정보검색\n4학년 2학기\n선수과목: 데이터베이스\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 데이터마이닝\n3학년 2학기\n선수과목: 인공지능\n강좌명: 수치해석및최적화\n3학년 1학기\n선수과목: 선형대수학\n강좌명: 데이터베이스\n3학년 1학기\n선수과목: 자료구조\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 인공지능\n3학년 1학기\n선수과목: 알고리즘, 확률및통계\n강좌명: 컴퓨터비전\n4학년 1학기\n선수과목: 인공지능, 기계학습\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 논리설계\n강좌명: 시스템보안\n4학년 2학기\n선수과목: 운영체제\n\n=== 소프트웨어공학과 ===\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 소프트웨어공학개론 1\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학캡스톤프로젝트\n4학년 1학기\n선수과목: 소프트웨어시스템분석및설계, 소프트웨어도메인모델링\n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: 해당없음\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 디지털공학\n강좌명: 창의적공학설계입문\n1학년 2학기\n선수과목: \n강좌명: 소프트웨어품질및테스팅\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계, 소스코드분석\n강좌명: 소프트웨어시스템분석및설계\n3학년 2학기\n선수과목: 소프트웨어공학개론, 소프트웨어개발프로세스\n강좌명: 소프트웨어보안\n4학년 1학기\n선수과목: 운영체제\n강좌명: 소프트웨어아키텍처이론과실제\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계\n강좌명: 데이터사이언스\n2학년 2학기\n선수과목: Python 프로그래밍 1\n강좌명: 고급웹프로그래밍\n3학년 2학기\n선수과목: 웹프로그래밍\n강좌명: C++프로그래밍\n1학년 2학기\n선수과목: \n강좌명: 컴퓨팅문제와알고리즘\n3학년 2학기\n선수과목: 알고리즘'}
2025-09-28 04:35:07 - service.nodes.synthesis_nodes - INFO - ✅ [DEBUG] 슬롯 sql에서 결과 발견: 18자
2025-09-28 04:35:07 - service.nodes.synthesis_nodes - INFO - ✅ [DEBUG] 슬롯 dept에서 결과 발견: 14자
2025-09-28 04:35:07 - service.nodes.synthesis_nodes - INFO - ✅ [DEBUG] 슬롯 curriculum에서 결과 발견: 2965자
2025-09-28 04:35:07 - service.nodes.synthesis_nodes - INFO - 📊 [DEBUG] 총 3개 결과 수집됨
2025-09-28 04:35:07 - synthesis.start - INFO - 🚀 합성 시작: prompt_length=8489
2025-09-28 04:35:07 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-5f67b761-8bc7-4f34-95ff-bae92d9c7cd1', 'json_data': {'messages': [{'content': '당신은 대학 정보 멘토입니다. 에이전트가 찾은 정보를 바탕으로 사용자 질문에 대해 자연스럽고 도움이 되는 답변을 작성해주세요.\n\n\n\n사용자 질문: 컴퓨터공학과 과목 추천해주세요\n\n에이전트가 찾은 정보:\n조회 결과를 가져올 수 없습니다.\n\n학과를 찾을 수 없습니다.\n\n쿼리: 컴퓨터공학과 과목 추천해주세요\n\n1. 최종 학습 목표: 컴퓨터공학의 기초 및 심화 과목을 통해 컴퓨터공학 전반에 대한 이해를 높이고 싶습니다.\n2. 진로 목표: 컴퓨터공학 지식을 바탕으로 소프트웨어 개발, 시스템 설계, 데이터 분석 등 다양한 분야에서 전문성을 갖추고 싶습니다.\n3. 직업 분야: 소프트웨어 개발 및 컴퓨터 시스템 설계.\n4. 직업: 소프트웨어 엔지니어.\n\n최종 쿼리: 소프트웨어 엔지니어.\n\n정의: 소프트웨어 엔지니어는 컴퓨터 시스템 및 소프트웨어를 설계, 개발, 테스트, 유지보수하는 전문가로, 다양한 프로그래밍 언어와 기술을 활용하여 사용자 요구에 맞는 소프트웨어 솔루션을 제공합니다.\n\n주요 역할:\n- 소프트웨어 설계 및 개발\n- 사용자 요구 분석 및 시스템 요구사항 정의\n- 프로그래밍 언어를 활용한 소프트웨어 구현\n- 소프트웨어 테스트 및 디버깅\n\n- 시스템 설계 및 아키텍처 개발\n- 시스템 구조 설계 및 최적화\n- 데이터베이스 설계 및 관리\n- 네트워크 및 보안 시스템 설계\n\n- 프로젝트 관리 및 협업\n- 소프트웨어 개발 프로젝트 계획 및 일정 관리\n- 팀원 간의 협업 및 커뮤니케이션\n\n추출된 기술 또는 지식:\n- 기술: 프로그래밍, 소프트웨어 설계, 시스템 아키텍처\n- 지식: 컴퓨터공학 기초, 데이터베이스, 네트워크\n\n추론된 기술:\n1. 프로그래밍 언어 및 소프트웨어 개발\n- Python, Java, C++ 등 다양한 프로그래밍 언어 숙련\n- 객체지향 프로그래밍 및 함수형 프로그래밍 이해\n- 소프트웨어 개발 라이프사이클(SDLC) 및 애자일 방법론 적용\n\n2. 시스템 설계 및 데이터베이스 관리\n- 데이터베이스 관리 시스템(DBMS) 이해 및 SQL 활용\n- 클라우드 컴퓨팅 및 분산 시스템 설계\n- 시스템 성능 최적화 및 확장성 고려\n\n3. 네트워크 및 보안\n- 네트워크 프로토콜 및 인터넷 구조 이해\n- 정보 보안 원칙 및 암호화 기술 적용\n- 네트워크 보안 및 침입 탐지 시스템 설계\n\n4. 소프트웨어 테스트 및 품질 보증\n- 자동화 테스트 및 테스트 주도 개발(TDD) 방법론\n- 소프트웨어 품질 관리 및 버그 추적 시스템 활용\n- 사용자 경험(UX) 및 인터페이스(UI) 디자인 원칙 적용\n\n5. 실무에서 활용되는 툴 및 플랫폼\n- 버전 관리 시스템(Git, SVN) 활용\n- 통합 개발 환경(IDE) 및 코드 편집기 사용\n- 클라우드 서비스(AWS, Azure, Google Cloud) 활용\n\n추론된 지식:\n1. 핵심 지식 (Core Knowledge)\n- 컴퓨터 과학 기초 → 알고리즘, 자료구조, 컴퓨터 아키텍처\n- 소프트웨어 공학 → 소프트웨어 개발 방법론 및 프로젝트 관리\n- 데이터베이스 시스템 → 데이터 모델링 및 쿼리 최적화\n\n2. 전문 지식 (Specialized Knowledge)\n- 인공지능 및 머신러닝 → 데이터 분석 및 예측 모델링\n- 분산 시스템 및 클라우드 컴퓨팅 → 대규모 시스템 설계 및 운영\n- 사이버 보안 → 보안 위협 분석 및 대응 전략\n\n3. 실무 지식 (Practical Knowledge)\n- 소프트웨어 개발 툴 및 환경 설정 → DevOps, CI/CD 파이프라인 구축\n- 사용자 인터페이스 및 경험 디자인 → UX/UI 디자인 원칙 및 도구 활용\n- 프로젝트 관리 및 협업 툴 → Jira, Trello, Slack 등 활용\n\n=== 컴퓨터인공지능학부 ===\n강좌명: 소프트웨어공학\n3학년 2학기\n선수과목: 자료구조\n강좌명: 원예작물생리학및실험\n2학년 1학기\n선수과목: 일반생물학 또는 식물학\n강좌명: 원예식물해부학\n2학년 1학기\n선수과목: 일반생물학\n강좌명: 식물생장조절학\n2학년 2학기\n선수과목: 일반생물학, 식물생리학\n강좌명: 컴퓨터공학총론\n1학년 2학기\n선수과목: \n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 기초회로실험\n2학년 2학기\n선수과목: 창의적공학설계입문,회로이론 1\n강좌명: 전자회로실험\n3학년 1학기\n선수과목: 전자회로 1\n강좌명: 웹서비스설계\n3학년 2학기\n선수과목: 데이터베이스, 운영체제\n강좌명: 컴퓨터그래픽스\n3학년 2학기\n선수과목: 수치해석및최적화\n강좌명: 정보검색\n4학년 2학기\n선수과목: 데이터베이스\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 데이터마이닝\n3학년 2학기\n선수과목: 인공지능\n강좌명: 수치해석및최적화\n3학년 1학기\n선수과목: 선형대수학\n강좌명: 데이터베이스\n3학년 1학기\n선수과목: 자료구조\n강좌명: 컴퓨터논리및논술론\n4학년 1학기\n선수과목: \n강좌명: 인공지능\n3학년 1학기\n선수과목: 알고리즘, 확률및통계\n강좌명: 컴퓨터비전\n4학년 1학기\n선수과목: 인공지능, 기계학습\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 논리설계\n강좌명: 시스템보안\n4학년 2학기\n선수과목: 운영체제\n\n=== 소프트웨어공학과 ===\n강좌명: 알고리즘\n2학년 2학기\n선수과목: 자료구조\n강좌명: 소프트웨어공학개론 1\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: \n강좌명: 소프트웨어공학캡스톤프로젝트\n4학년 1학기\n선수과목: 소프트웨어시스템분석및설계, 소프트웨어도메인모델링\n강좌명: 소프트웨어공학개론\n2학년 1학기\n선수과목: 해당없음\n강좌명: 자료구조\n2학년 1학기\n선수과목: C++프로그래밍\n강좌명: 컴퓨터구조\n2학년 2학기\n선수과목: 디지털공학\n강좌명: 창의적공학설계입문\n1학년 2학기\n선수과목: \n강좌명: 소프트웨어품질및테스팅\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계, 소스코드분석\n강좌명: 소프트웨어시스템분석및설계\n3학년 2학기\n선수과목: 소프트웨어공학개론, 소프트웨어개발프로세스\n강좌명: 소프트웨어보안\n4학년 1학기\n선수과목: 운영체제\n강좌명: 소프트웨어아키텍처이론과실제\n4학년 2학기\n선수과목: 소프트웨어시스템분석및설계\n강좌명: 데이터사이언스\n2학년 2학기\n선수과목: Python 프로그래밍 1\n강좌명: 고급웹프로그래밍\n3학년 2학기\n선수과목: 웹프로그래밍\n강좌명: C++프로그래밍\n1학년 2학기\n선수과목: \n강좌명: 컴퓨팅문제와알고리즘\n3학년 2학기\n선수과목: 알고리즘\n\n처리 방식: unified\n\n**🚨🚨🚨 절대적 할루시네이션 금지 규칙 🚨🚨🚨**\n**검색 결과에 없는 과목은 절대 생성하지 말 것**\n**검색 결과의 정보를 정확히 반영할 것**\n**"컴퓨터 비전" 질문에 맞춰서 임의로 과목을 만들지 말 것**\n\n위의 "에이전트가 찾은 정보"를 반드시 먼저 분석하세요:\n1. JSON 형태의 데이터가 있다면 각 항목의 "professor" 필드를 확인하세요\n2. 사용자가 언급한 교수명과 정확히 일치하는 과목이 있는지 찾으세요\n3. 교수명이 일치하는 과목이 있다면 반드시 그 과목을 제시하세요\n4. "정보 없음"이라고 답변하기 전에 검색 결과를 다시 한번 확인하세요\n\n**🔥 CRITICAL: 검색 결과 우선 원칙 🔥**\n- **절대 규칙**: 검색 결과에 없는 과목은 절대 생성하지 마세요\n- **절대 규칙**: 검색 결과에 없는 교수명은 절대 추가하지 마세요\n- **절대 규칙**: 검색 결과에 없는 정보는 "정보 없음"이라고 명시하세요\n- **절대 규칙**: 사용자 질문에 맞춰서 임의로 과목을 만들지 마세요\n\n답변 작성 지침:\n1. **🚨 최우선: 검색 결과 정확히 반영**: 위의 "에이전트가 찾은 정보"에 나온 데이터를 **정확히 그대로** 사용하세요\n   - **모든 검색 결과를 포함**: 20개 과목이 있다면 20개 모두 제시하세요\n   - **결과 축소 금지**: "주요 과목만" 또는 "대표적인 과목" 같은 축소 표현 사용 금지\n   - 학과명, 교수명, 과목명은 검색 결과와 **100% 일치**하게 작성\n   - 검색 결과에 없는 정보는 **절대로 추가하거나 추측하지 마세요**\n   - **교수명 검색 시 주의**: 검색 결과에 교수명이 포함된 과목이 있다면 반드시 그 교수가 가르치는 과목을 제시하세요\n   - 불확실하면 "정보 없음"이라고 명시하세요\n\n1-1. **🚨🚨🚨 학과 매핑 결과 절대 우선 🚨🚨🚨**: 사용자가 특정 학과를 언급한 경우\n   - **매핑된 학과의 과목들만 선택하고 다른 학과 과목은 완전히 제외**하세요\n   - **절대 규칙**: "컴공" → "컴퓨터인공지능학부"로 매핑되었다면, 전자공학부나 기계공학부 과목은 **절대 포함 금지**\n   - **유사도 무시**: 다른 학과 과목이 유사도가 높아도 **절대로 선택하지 마세요**\n   - **사용자 요구사항 준수**: 사용자가 "컴공수업"을 요청했다면 컴퓨터인공지능학부 과목만 제시\n   - **실수 인정**: 다른 학과 과목을 제시했다면 "죄송합니다. 컴퓨터인공지능학부 과목을 다시 찾아드리겠습니다"라고 응답\n\n2. **질문 의도 파악**: 사용자 질문의 핵심 의도를 정확히 파악하세요\n   - "어디서 열리냐", "강의실", "몇 호" → **강의실(location)**을 가장 먼저, 크게 강조하여 답변\n   - "언제", "시간표", "몇 교시" → **시간표(schedule)** 우선 답변  \n   - "어느 학과", "어느 과", "학과 어디" → **학과명** 우선 답변\n   - "누가 가르치냐", "교수 누구", "○○ 교수님은 무슨 수업" → **교수명** 우선 답변\n   - "몇 학점", "학점" → **학점 정보** 우선 답변\n   \n   **교수명 질문 특별 처리**:\n   - 사용자가 특정 교수명을 언급했다면, 검색 결과에서 해당 교수명이 포함된 모든 과목을 찾아 제시하세요\n   - "이정휴 교수님은 무슨 수업 가르치시느데?" → 검색 결과에서 "이정휴"가 professor 필드에 있는 모든 과목을 찾아 제시\n   - 교수명이 정확히 일치하는 과목이 있다면 "가르치는게 없다"고 절대 답변하지 마세요\n\n3. **🔥 이전 대화 연결성 강화 🔥**: 위 대화 히스토리가 있다면 **반드시** 이전 대화와 연결하여 답변하세요\n   - **지시어 해석**: 사용자가 "그거", "그 교수님", "첫 번째", "마지막", "한지영 교수님" 등 **구체적 참조**를 사용하면 이전 대화에서 언급된 내용을 찾아 정확히 매칭\n   - **연결 표현 의무 사용**: "앞서 말씀드린 교수님들 중에서...", "이전에 보여드린 목록에서..." 등으로 **반드시** 연결\n   - **컨텍스트 우선**: 사용자가 이전 대화를 참조하는 질문을 했다면, 새로운 검색보다 **이전 결과를 우선 활용**\n   - **예시**:\n     * 이전: "컴퓨터공학과 교수님들: 1.한지영, 2.강경란..."\n     * 현재: "한지영 교수님 뭘 가르치나요?"\n     * 답변: "앞서 보여드린 컴퓨터공학과 교수님 목록 중 **한지영 교수님**께서 가르치시는 과목은..."\n\n4. 사용자 질문에 직접적으로 답변하세요\n\n5. 찾은 정보를 바탕으로 구체적이고 실용적인 정보를 제공하세요\n\n6. **상세 정보 제공**: 각 과목에 대해 **검색된 실제 정보만** 제공하세요:\n   - 과목명 (name) - 필수\n   - **학과 (department_full_name 최우선, 없으면 department)** - 필수  \n     ⚠️ **중요**: `department_full_name`이 있으면 반드시 이것을 사용하세요 (SQL JOIN 결과가 더 정확함)\n   - 교수명 (professor) - 있는 경우만\n   - **강의실 (location)** - 있는 경우만, **"어디서 열리냐" 질문 시 최우선**\n   - **시간표 (schedule)** - 있는 경우만, **"언제" 질문 시 최우선**\n   - 학점 (credits) - 있는 경우만\n   - 과목코드 (course_code) - 있는 경우만\n   - 선수과목 (prerequisite) - 있는 경우만\n   - 대상 학년 (target_grade) - 있는 경우만\n   - 수업방식 (delivery_mode) - 있는 경우만\n\n7. 자연스러운 한국어로 작성하되, 위 정보들을 체계적으로 정리해서 제시하세요\n\n8. 단계별 처리 과정("데이터베이스에서 검색 중입니다" 등)은 절대 포함하지 마세요\n\n9. 시스템 내부 정보(VECTOR_SEARCH, SQL_DATABASE 등)는 노출하지 마세요\n\n10. 추천 과목이 있다면 수강 순서나 선수과목도 함께 안내하세요\n\n11. **🚨🚨🚨 할루시네이션 절대 금지 🚨🚨🚨**: \n    **예시 분석**: 검색 결과가 "데이터마이닝 (산업정보시스템공학과)"라면\n    - ✅ 정답: "데이터마이닝은 **산업정보시스템공학과**에서 열립니다"\n    - ❌ 틀림: "데이터마이닝은 컴퓨터인공지능학부에서 열립니다" (완전히 다른 학과)\n    - ❌ 틀림: 검색 결과에 없는 교수명, 학점, 시간표 정보 추가\n    \n    **엄격한 규칙**:\n    - 검색 결과의 학과명을 **절대로** 다른 학과명으로 바꾸지 마세요\n    - 검색 결과에 없는 교수명을 **절대로** 추가하지 마세요  \n    - 검색 결과에 없는 정보는 "정보 없음"이라고 명시하세요\n\n12. 부족한 정보가 있다면 추가 질문을 유도하세요\n\n13. **중요**: 검색 결과를 그대로 JSON 형식으로 출력하지 마세요\n\n14. **🚨 절대적 학과 필터링 🚨**: 사용자가 특정 학과를 명시한 경우\n    - **절대 규칙**: "컴공" = 컴퓨터인공지능학부 과목**만** 허용, 전자공학부/기계공학부 등 **절대 금지**\n    - **엄격 적용**: "전자공학" = 전자공학부**만**, "경영" = 경영학과**만**\n    - **예외 없음**: 아무리 유사도가 높아도 매핑되지 않은 학과 과목은 **100% 제외**\n    - **사용자 실망 방지**: 잘못된 학과 과목 제시 시 "죄송합니다, 다시 찾겠습니다" 응답 필수\n\n15. **🚨🚨🚨 학과 정보 정확성 검증 🚨🚨🚨**:\n    - **데이터 정확성 우선**: `department_full_name`이 있으면 이것이 실제 소속 학과입니다\n    - **교차 검증**: `department`와 `department_full_name`이 다르면 `department_full_name`을 실제 소속으로 간주\n    - **사용자 요구사항 엄격 적용**: 사용자가 "컴공"(컴퓨터인공지능학부)을 요청했는데 실제 소속이 다른 학과면 **제외**해야 함\n    - **예시**:\n      - department=\'컴퓨터인공지능학부\', department_full_name=\'국제이공학부\'\n      - → 실제 소속: 국제이공학부, 사용자가 "컴공"을 요청했다면 **제외**\n      - → 강의실, 교수 정보 모두 국제이공학부 기준으로 표시\n\n16. **엄격성**: "참고용으로 포함", "관련도가 높아 포함" 등의 이유로 다른 학과 과목을 포함하지 마세요\n\n17. **완전성**: 사용자 요구사항에 정확히 맞는 학과의 과목들만 활용하여 선택지를 제공하세요\n\n18. **🚨 결과 개수 보장 🚨**: \n    - 검색 결과에 20개 과목이 있다면 반드시 20개 모두 제시하세요\n    - 2-3개만 제시하고 "이 외에도..." 같은 표현 사용 금지\n    - 모든 과목을 개별적으로 나열하여 완전한 정보 제공\n\n**출력 형식 예시**:\n\n**일반적인 답변 형식**:\n**1. [과목명]**\n- 학과: [학과명]\n- 교수: [교수명] (또는 "정보 없음" 또는 필드 생략)\n- 강의실: [강의실] (정보가 있는 경우만)\n- 시간표: [시간표] (정보가 있는 경우만)\n- 학점: [학점]학점 (정보가 있는 경우만)\n- 과목코드: [과목코드] (정보가 있는 경우만)\n- 선수과목: [선수과목] (정보가 있는 경우만, 없으면 "정보 없음")\n- 대상학년: [대상학년] (정보가 있는 경우만)\n- 수업방식: [수업방식] (정보가 있는 경우만)\n- 설명: [과목 설명] (정보가 있는 경우만)\n\n**"어디서 열리냐" 질문에 대한 우선순위 답변 형식**:\n"[교수명] 교수님의 [과목명] 수업은 **[강의실]**에서 열립니다."\n\n예시:\n- "송현제 교수님의 데이터마이닝 수업은 **컴퓨터정보관 205호**에서 열립니다."\n- "김평 교수님의 정보검색 수업은 **문헌정보관 301호**에서 열립니다."\n\n**시간표 정보가 있으면 추가**:\n- "시간표: 화목 1-2교시"\n- "수업방식: 대면수업"\n\n**"언제" 질문에 대한 우선순위 답변 형식**:\n"[교수명] 교수님의 [과목명] 수업은 **[시간표]**에 있습니다."\n\n**"○○ 교수님은 무슨 수업 가르치시느데?" 질문에 대한 답변 형식**:\n"[교수명] 교수님께서는 다음 과목들을 가르치십니다:\n\n**1. [과목명]**\n- 학과: [학과명]\n- 강의실: [강의실] (정보가 있는 경우만)\n- 시간표: [시간표] (정보가 있는 경우만)\n- 학점: [학점]학점 (정보가 있는 경우만)\n- 설명: [과목 설명] (정보가 있는 경우만)\n\n**2. [다른 과목명]** (해당 교수가 가르치는 다른 과목이 있는 경우)\n- ..."\n\n추가 정보가 있으면 간단히 덧붙이되, 강의실/시간표를 가장 강조하여 답변하세요.\n\n위 정보를 종합하여 사용자에게 도움이 되는 답변을 작성해주세요:', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:35:07 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:35:07 - httpcore.connection - DEBUG - close.started
2025-09-28 04:35:07 - httpcore.connection - DEBUG - close.complete
2025-09-28 04:35:07 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:35:07 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f79c59a1d50>
2025-09-28 04:35:07 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f79c61abe30> server_hostname='api.openai.com' timeout=None
2025-09-28 04:35:07 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f79c59a16d0>
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:35:07 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:35:25 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:35:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'17574'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'17601'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29995521'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'8ms'), (b'x-request-id', b'req_85495a16545e4d1d91a5c457a16564df'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d7141fff0564b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:35:25 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:35:25 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:35:25 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:35:25 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:35:25 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:35:25 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:35:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '17574', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '17601', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29995521', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '8ms', 'x-request-id': 'req_85495a16545e4d1d91a5c457a16564df', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d7141fff0564b-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:35:25 - openai._base_client - DEBUG - request_id: req_85495a16545e4d1d91a5c457a16564df
2025-09-28 04:35:25 - synthesis.success - INFO - ✅ 합성 성공: result_length=1086
2025-09-28 04:35:25 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:35:25 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (17.95초)
2025-09-28 04:35:25 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:35:25 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:35:25 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
2025-09-28 04:37:23 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:37:23 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:37:23 - main - INFO - ==================================================
2025-09-28 04:37:23 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:37:23 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:37:23 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:37:23 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:37:23 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:37:23 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:37:23 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:37:23 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:37:23 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:37:23 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:37:23 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:37:35 - main - INFO - 🚀 AI Mentor Service 시작 - 로그 시스템 초기화 완료
2025-09-28 04:37:35 - main - DEBUG - 📁 로그 디렉토리: /app/logs
2025-09-28 04:37:35 - main - INFO - ==================================================
2025-09-28 04:37:35 - main - INFO - 🚀 서버 시작 - 핸들러 워밍업 시작
2025-09-28 04:37:35 - service.core.mentor_service - INFO - 🚀 HybridMentorService 초기화
2025-09-28 04:37:35 - service.memory.memory - INFO - ConversationMemory 초기화 완료
2025-09-28 04:37:35 - service.core.langgraph_app - INFO - 🏗️ 통합 LangGraph 아키텍처 초기화 시작
2025-09-28 04:37:35 - service.core.langgraph_app - INFO - 🔧 그래프 구조 생성
2025-09-28 04:37:35 - service.nodes.node_manager - INFO - 🎯 총 12개 노드 등록: ['router', 'light', 'medium_department', 'medium_sql', 'medium_vector', 'medium_curriculum', 'heavy_sequential', 'synthesis', 'finalize', 'error_handling', 'health_check', 'debug']
2025-09-28 04:37:35 - service.core.langgraph_app - INFO - ✅ 12개 노드 추가 완료
2025-09-28 04:37:35 - service.core.langgraph_app - INFO - ✅ 통합 그래프 컴파일 완료
2025-09-28 04:37:35 - service.core.langgraph_app - INFO - ✅ 통합 LangGraph 아키텍처 초기화 완료
2025-09-28 04:37:35 - service.core.mentor_service - INFO - ✅ 초기화 완료
2025-09-28 04:37:35 - main - INFO - ✅ 서버 시작 - 모든 핸들러 워밍업 완료
2025-09-28 04:37:55 - controller.agentController - INFO - 🚀 /agent endpoint called for session: default, stream: False
2025-09-28 04:37:55 - service.core.mentor_service - INFO - 🤖 질문 처리: 컴퓨터공학과 과목 추천해주세요...
2025-09-28 04:37:55 - service.core.langgraph_app - INFO - 🚀 통합 쿼리 처리 시작: '컴퓨터공학과 과목 추천해주세요...'
2025-09-28 04:37:55 - service.nodes.base_node - INFO - ⏱️ Router 노드 실행 시작
2025-09-28 04:37:55 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-81d22b0a-acc1-43b2-b88c-b01b8df6e8cb', 'json_data': {'messages': [{'content': 'You are a query expansion specialist for the Jeonbuk National University AI Mentor.\nAnalyze the user query and expand it to improve search results.\nOutput MUST be a single JSON object — no free-form text outside of JSON.\n\n[EXPANSION GOALS]\n1. expansion_context: 1–2 sentences that explain the search context.\n2. expansion_keywords: 3–8 core keywords (comma-separated) - for backward compatibility.\n3. expansion_augmentation: Structured summary in the format "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)".\n4. constraints: Extract any filters (semester, level, college).\n5. entities: Structured entity extraction with clear professor/course/department separation.\n6. **DOMAIN KNOWLEDGE EXPANSION**: Use your knowledge to expand abbreviations and aliases to full academic terms.\n\n[ROUTING HINTS]\n- If the query mentions a person name with "교수"/"교수님"/"Professor", prefer database metadata lookup:\n  - "decision_question_type": "StructuredQuery"\n  - "decision_data_source": "DB"\n- Unless explicit biography/achievement intent appears (e.g., "약력", "프로필", "논문", "연구업적", "생애"), keep the data source as DB for professor/department/course metadata queries.\n- Only choose "VectorSearch" (or "Hybrid") when the user explicitly asks about course content/topics (e.g., "내용", "주제", "배우나요", "cover", "syllabus", "topics").\n\n[CONSECUTIVE QUESTION DETECTION]\n- Look for reference words that indicate continuation of previous conversation:\n  - Pronouns: "그", "그것", "이것", "저것"\n  - Demonstratives: "그 수업", "그 과목", "그 교수님", "해당 과목"\n  - Partial references: "딥러닝 기초", "어떤 교수", "몇 학점"\n  - Follow-up questions: "언제 열려?", "누가 가르쳐?", "몇 학점이야?"\n- When detected, mark as "is_follow_up": true in entities\n\n[DOMAIN KNOWLEDGE EXPANSION]\n**학과 별칭 확장**: 사용자가 별칭이나 줄임말을 사용하면 정식 학과명도 포함하세요:\n- "문정과" → "문헌정보학과" (도서관학, 정보관리학 포함)\n- "컴공" → "컴퓨터공학과", "컴퓨터인공지능학부" \n- "전전" → "전기전자공학과", "전자공학부"\n- "경영" → "경영학과", "경영학부"\n- "물리" → "물리학과", "물리학부"\n- "화공" → "화학공학과"\n- "기계공" → "기계공학과", "기계공학부"\n\n**학문 도메인 확장**: 학과의 핵심 학문 영역도 키워드에 포함:\n- 문헌정보학과 → "도서관학, 정보관리, 아카이브, 메타데이터, 정보검색, 분류체계"\n- 컴퓨터공학과 → "프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어"\n- 전자공학과 → "회로설계, 신호처리, 통신, 반도체, 임베디드"\n- 경영학과 → "마케팅, 재무, 인사, 전략, 회계, 조직"\n\n[KEYWORD RULES FOR CACHE MATCHING]\n- Do NOT invent entities. Prefer tokens directly present in the user query; include high-certainty variants only.\n- **BUT apply domain knowledge expansion** for academic department aliases and subject areas.\n\n[ENTITY EXTRACTION RULES]\n1. PROFESSOR NAMES (교수명):\n   - Extract ONLY actual professor names mentioned in the query\n   - Format: "이름" (without titles like "교수", "교수님", "Professor")\n   - Examples: "송현제", "김철수", "이영희"\n   - DO NOT include generic terms like "교수", "교수님", "Professor"\n\n2. COURSE NAMES (과목명):\n   - Extract ONLY actual course/subject names mentioned in the query\n   - Include both full name and compact variant (without spaces)\n   - Examples: "프로그래밍언어론", "프로그래밍 언어론", "데이터구조", "머신러닝"\n   - Include course codes if present: "CS101", "CSED123"\n   - DO NOT include generic terms like "수업", "강의", "과목"\n\n3. DEPARTMENT NAMES (학과명):\n   - Extract department names as written\n   - Include common aliases only if explicitly mentioned\n   - Examples: "컴퓨터공학과", "컴공", "전자공학과"\n   - DO NOT include generic terms like "학과", "학부", "전공"\n\n4. EXCLUSION RULES:\n   - NEVER include generic words: "교수", "교수님", "수업", "강의", "과목", "학과", "대학", "학교"\n   - NEVER invent names that don\'t appear in the query\n   - Keep 3–8 precise, non-duplicated tokens\n   - Order by importance: professor, course, department, campus/college\n\n[EXAMPLES]\nExample 1: "머신러닝 수업"\n→ expansion_context: "Looking for machine learning and AI-related courses in the Computer Science department."\n→ expansion_keywords: "머신러닝,machine learning,인공지능,AI,컴퓨터공학,데이터과학"\n→ expansion_augmentation: "(Definition: Machine learning algorithms, Topic: Computer Science, Outcome: AI development skills, Department: Computer Science)"\n\nExample 2: "송현제 교수님 프로그래밍 언어론 어디서 열려?"\n→ expansion_context: "Looking for course schedule information for Professor Song Hyeon-je\'s Programming Language Theory course."\n→ expansion_keywords: "송현제,프로그래밍언어론,프로그래밍 언어론,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Programming language concepts, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "송현제", "course": "프로그래밍언어론", "department": "컴퓨터공학과", "course_code": null}\n\nExample 3: "김철수 교수님 데이터구조 수업 시간표"\n→ expansion_context: "Looking for course schedule for Professor Kim Chul-su\'s Data Structures course."\n→ expansion_keywords: "김철수,데이터구조,컴퓨터공학과,강의시간표"\n→ expansion_augmentation: "(Definition: Data structure algorithms, Topic: Computer Science, Outcome: Programming skills, Department: Computer Science)"\n→ entities: {"professor": "김철수", "course": "데이터구조", "department": "컴퓨터공학과", "course_code": null}\n\nExample 4: "문정과에서 가르치는 과목을 찾아줘"\n→ expansion_context: "Looking for courses offered in the Department of Library and Information Science (문헌정보학과)."\n→ expansion_keywords: "문정과,문헌정보학과,도서관학,정보관리,아카이브,메타데이터,정보검색,분류체계"\n→ expansion_augmentation: "(Definition: Library and information science courses, Topic: Information Management, Outcome: Library science skills, Department: Library and Information Science)"\n→ entities: {"professor": null, "course": null, "department": "문헌정보학과", "course_code": null}\n\n[OUTPUT JSON]\n{\n  "expansion_context": "1–2 sentences describing context",\n  "expansion_keywords": "keyword1,keyword2,keyword3",\n  "expansion_augmentation": "(Definition: ..., Topic: ..., Outcome: ..., Department: ...)",\n  "constraints": {\n    "semester": "Spring|Fall|null",\n    "level": "Introductory|Intermediate|Advanced|null",\n    "college": "college name|null"\n  },\n  "entities": {\n    "professor": "exact professor name or null",\n    "course": "exact course name or null",\n    "department": "exact department name or null",\n    "is_follow_up": "true if this is a follow-up question referring to previous context, false otherwise",\n    "course_code": "course code if present or null"\n  },\n  "decision_question_type": "StructuredQuery|Exploratory|Curriculum|GeneralChat",\n  "decision_data_source": "DB|VectorSearch|Hybrid|None"\n}\n\n[USER QUERY]\n컴퓨터공학과 과목 추천해주세요\n\nExpand the query and output JSON only.ㅇ', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:37:55 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:37:55 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-09-28 04:37:55 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f139e47bcd0>
2025-09-28 04:37:55 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7f139eb4be30> server_hostname='api.openai.com' timeout=None
2025-09-28 04:37:55 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7f139e48bd50>
2025-09-28 04:37:55 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:37:55 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:37:55 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:37:55 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:37:55 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:37:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1809'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1824'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998115'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_0a93e90a920d4000b6521a74a8cfa84e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=_RmDc7hRZM8BLDfsWkd1FqNxQg6Q_EerLw3u1izYSlI-1759001878-1.0.1.1-jNHqDb1HMvv0J5sBbEhGw53yt0aaRxuGlyeyHAbGdnNX3PPtJLhYhwwEhq5UfeFfsqnLbAHN4n1kNNKQ6eDoQN9Z6jvm1stNouJh3.eXvcI; path=/; expires=Sat, 27-Sep-25 20:07:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=tMi9YkP0RcyMWy0ALa5Jas0Un5xLjq0gOGbVMMZCUWI-1759001878010-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d755aba5f03cc-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:37:58 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:37:58 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 27 Sep 2025 19:37:58 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'jeonbuk-national-university'), ('openai-processing-ms', '1809'), ('openai-project', 'proj_GsEDOgdDSI76JalmDfnt7uXv'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1824'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '30000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '29998115'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '3ms'), ('x-request-id', 'req_0a93e90a920d4000b6521a74a8cfa84e'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=_RmDc7hRZM8BLDfsWkd1FqNxQg6Q_EerLw3u1izYSlI-1759001878-1.0.1.1-jNHqDb1HMvv0J5sBbEhGw53yt0aaRxuGlyeyHAbGdnNX3PPtJLhYhwwEhq5UfeFfsqnLbAHN4n1kNNKQ6eDoQN9Z6jvm1stNouJh3.eXvcI; path=/; expires=Sat, 27-Sep-25 20:07:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=tMi9YkP0RcyMWy0ALa5Jas0Un5xLjq0gOGbVMMZCUWI-1759001878010-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '985d755aba5f03cc-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-09-28 04:37:58 - openai._base_client - DEBUG - request_id: req_0a93e90a920d4000b6521a74a8cfa84e
2025-09-28 04:37:58 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 647자 텍스트
2025-09-28 04:37:58 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 635자, 7개 필드
2025-09-28 04:37:58 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:37:58 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=2
2025-09-28 04:37:58 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=None, score=2
2025-09-28 04:37:58 - handlers.query_analyzer.analyzer - INFO - 🔗 [쿼리조합] 원본: '컴퓨터공학과 과목 추천해주세요'
2025-09-28 04:37:58 - handlers.query_main - INFO - 🔗 확장 정보가 조합된 향상된 쿼리: '컴퓨터공학과 과목 추천해주세요

[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어'
2025-09-28 04:37:58 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-c77b2b3b-f201-42c4-a2b7-3904c683252e', 'json_data': {'messages': [{'content': '# CRITICAL DEPARTMENT ALIAS ROUTER v4\n\n## 🚨 STRICT JSON RESPONSE REQUIREMENT\n**YOU MUST RESPOND ONLY WITH VALID JSON. NO EXPLANATION, NO COMMENTS, NO EXTRA TEXT.**\n**START YOUR RESPONSE WITH { AND END WITH }**\n\n## 🔥 핵심 규칙\n- "컴공" 등장 시 → 무조건 Department-Mapping 선행!\n  - owner_hint = DEPARTMENT_MAPPING+SQL_QUERY\n  - complexity = heavy\n\n[AGENTS]\n- FAISS-Search-Agent: 강좌 설명/내용 검색 (주제·내용 유사도 매칭)\n- SQL-Agent: 교수/학과/강좌 메타정보 및 조건 검색 (코드, 교수, 학기, 학년, 위치 등)\n- Department-Mapping-Agent: 학과/학부/대학 명칭 정규화\n- Curriculum-Agent: 융합/복수전공 커리큘럼 설계\n- LLM-Fallback-Agent: 일반 대화, 인사, 잡담\n\n[CRITICAL 과목 추천 vs 융합 커리큘럼 구분]\n- 과목/강의/수업 관련 키워드 → FAISS Search (무조건):\n  "과목 추천", "강의 추천", "수업 추천", "들을 수 있는 과목",\n  "추천해줘", "~관련 수업", "~관련 강의", "~과목", "~수업",\n  "~와 관련된 수업", "~에 대한 과목", "배울 수 있는 과목"\n  → FAISS_SEARCH (과목 내용 검색)\n\n- 융합 커리큘럼 키워드 → Curriculum Agent (무조건):\n  "융합", "복수전공", "부전공", "다른 학과", "커리큘럼 설계",\n  "융합 커리큘럼", "다전공", "학습 경로", "로드맵", "진로 설계"\n  → CURRICULUM_PLAN (커리큘럼 설계)\n\n[라우팅 우선순위]\n1) 과목/강의/수업 추천 키워드 → FAISS (무조건)\n2) 융합/복수전공 커리큘럼 키워드 → Curriculum (무조건 medium)\n3) 학과 별칭(컴공/전전/소웨공 등) → Department-Mapping 선행\n   - 교수 쿼리: Mapping → SQL\n   - 과목 내용: Mapping → FAISS\n   - 학과명만: Mapping\n4) 교수 언급(사람 이름+교수/Prof) → SQL (단, 학과별칭 없을 때)\n5) 학과/대학 행정정보 → SQL\n6) 학년/학기/분반 조건 → SQL\n7) 강좌 내용/주제 검색 → FAISS\n8) 일반 대화 → LLM-Fallback\n\n[복잡도 정의]\n- light: 인사/잡담 → 1단계 LLM-Fallback\n- medium: 단일 에이전트 1개 실행 → plan 길이 1\n- heavy: 다중 에이전트 실행 → plan 길이 ≥2\n- 커리큘럼 설계: 무조건 medium\n\n[출력 스키마]\n{\n  "complexity": "light|medium|heavy",\n  "owner_hint": "SQL_QUERY | FAISS_SEARCH | DEPARTMENT_MAPPING | CURRICULUM_PLAN | LLM_FALLBACK | DEPARTMENT_MAPPING+SQL_QUERY | DEPARTMENT_MAPPING+FAISS_SEARCH | FAISS_SEARCH+SQL_QUERY",\n  "category": "course_lookup|course_content|curriculum_design|general",\n  "question_type": "ProfessorCourseLookup|InfoLookup|CurriculumDesign|ChitChat|CourseLocationLookup",\n  "data_source": "DB|Web|Mixed",\n  "reasoning": "짧은 근거",\n  "plan": [\n    {"step": 1, "agent": "에이전트명", "goal": "간결한 설명"}\n  ],\n  "complexity_level": "complexity 복사",\n  "execution_type": "sequential|parallel|hybrid",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping|sql_search|vector_search|curriculum_design|llm_response", "input": "쿼리", "description": "plan.goal 복사"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\n[LangGraph 변환 규칙]\n- Department-Mapping-Agent → department_mapping\n- SQL-Agent → sql_search\n- FAISS-Search-Agent → vector_search\n- Curriculum-Agent → curriculum_design\n- LLM-Fallback-Agent → llm_response\n- execution_type: 순차=sequential, 병렬=parallel, 혼합=hybrid\n\n[CRITICAL 예시]\nQ: "컴공 교수님 누구 있어?"\n{\n  "complexity": "heavy",\n  "owner_hint": "DEPARTMENT_MAPPING+SQL_QUERY",\n  "category": "course_lookup",\n  "question_type": "ProfessorCourseLookup",\n  "data_source": "DB",\n  "reasoning": "컴공 별칭 감지 → Mapping 먼저",\n  "plan": [\n    {"step": 1, "agent": "Department-Mapping-Agent", "goal": "컴공을 표준 학과명으로 정규화"},\n    {"step": 2, "agent": "SQL-Agent", "goal": "교수 목록 조회"}\n  ],\n  "complexity_level": "heavy",\n  "execution_type": "sequential",\n  "steps": [\n    {"id": "step_1", "type": "department_mapping", "input": "컴공", "description": "컴공을 표준 학과명으로 정규화"},\n    {"id": "step_2", "type": "sql_search", "input": "정규화된 학과명", "description": "교수 목록 조회"}\n  ],\n  "dependencies": {\n    "step_2": ["step_1"]\n  }\n}\n\nQ: "컴퓨터공학과 과목 추천해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "FAISS_SEARCH",\n  "category": "course_lookup",\n  "question_type": "CourseRecommendation",\n  "data_source": "DB",\n  "reasoning": "과목 추천 키워드 → FAISS 검색",\n  "plan": [\n    {"step": 1, "agent": "FAISS-Search-Agent", "goal": "컴퓨터공학과 과목 추천"}\n  ]\n}\n\nQ: "융합 커리큘럼 설계해주세요"\n{\n  "complexity": "medium",\n  "owner_hint": "CURRICULUM_PLAN",\n  "category": "curriculum_design",\n  "question_type": "CurriculumDesign",\n  "data_source": "Mixed",\n  "reasoning": "융합 키워드 → Curriculum Agent",\n  "plan": [\n    {"step": 1, "agent": "Curriculum-Agent", "goal": "융합 커리큘럼 설계"}\n  ]\n}\n\n## 🚨 FINAL REMINDER: RESPOND ONLY WITH JSON\nQuery: 컴퓨터공학과 과목 추천해주세요\n\n[확장정보] 배경정보: Looking for recommended courses in the Department of Computer Science. | 관련키워드: 컴퓨터공학과, 컴공, 프로그래밍, 알고리즘, 데이터구조, AI, 머신러닝, 소프트웨어\n\n**CRITICAL**: Your response must be ONLY valid JSON following the schema above. NO explanations, NO comments. Start with { and end with }.', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:37:58 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:37:58 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:37:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'1510'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1526'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29998623'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'2ms'), (b'x-request-id', b'req_9d0a375fb7f44824909fd261f527bda5'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d7569b9a303cc-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:37:59 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:37:59 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:37:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '1510', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '1526', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29998623', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '2ms', 'x-request-id': 'req_9d0a375fb7f44824909fd261f527bda5', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d7569b9a303cc-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:37:59 - openai._base_client - DEBUG - request_id: req_9d0a375fb7f44824909fd261f527bda5
2025-09-28 04:37:59 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 라우터 응답: ```json
{
  "complexity": "medium",
  "owner_hint": "FAISS_SEARCH",
  "category": "course_lookup",
  "question_type": "CourseRecommendation",
  "data_source": "DB",
  "reasoning": "과목 추천 키워드 → FAISS 검색",
  "plan": [
    {"step": 1, "agent": "FAISS-Search-Agent", "goal": "컴퓨터공학과 과목 추천"}
  ],
  "complexity_level": "medium",
  "execution_type": "sequential",
  "steps": [
    {"id": "step_1", "type": "vector_search", "input": "컴퓨터공학과 과목 추천", "description": "컴퓨터공학과 과목 추천"}
  ],
  "dependencies": {}
}
```
2025-09-28 04:37:59 - utils.json_utils - DEBUG - JSON 블록 추출 시도: 504자 텍스트
2025-09-28 04:37:59 - utils.json_utils - DEBUG - 🔧 JSON 객체 추출: 492자, 11개 필드
2025-09-28 04:37:59 - utils.json_utils - INFO - 🔍 1개 JSON 객체 발견, 최적 선택 중...
2025-09-28 04:37:59 - utils.json_utils - DEBUG - 🔍 JSON #1: complexity=medium, score=5
2025-09-28 04:37:59 - utils.json_utils - INFO - ✅ 최적 JSON 선택: complexity=medium, score=5
2025-09-28 04:37:59 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 추출된 JSON: {'complexity': 'medium', 'owner_hint': 'FAISS_SEARCH', 'category': 'course_lookup', 'question_type': 'CourseRecommendation', 'data_source': 'DB', 'reasoning': '과목 추천 키워드 → FAISS 검색', 'plan': [{'step': 1, 'agent': 'FAISS-Search-Agent', 'goal': '컴퓨터공학과 과목 추천'}], 'complexity_level': 'medium', 'execution_type': 'sequential', 'steps': [{'id': 'step_1', 'type': 'vector_search', 'input': '컴퓨터공학과 과목 추천', 'description': '컴퓨터공학과 과목 추천'}], 'dependencies': {}}
2025-09-28 04:37:59 - handlers.query_analyzer.analyzer - INFO - 🔍 [DEBUG] 최종 결정: {'complexity': 'medium', 'is_complex': True, 'category': 'course_lookup', 'owner_hint': 'FAISS_SEARCH', 'plan': None, 'reasoning': '과목 추천 키워드 → FAISS 검색'}
2025-09-28 04:37:59 - handlers.query_analyzer.analyzer - INFO - 🎯 라우팅 결정: medium
2025-09-28 04:37:59 - service.nodes.routing_nodes - INFO - ✅ 라우팅: medium
2025-09-28 04:37:59 - service.nodes.base_node - INFO - ✅ Router 노드 완료 (4.15초)
2025-09-28 04:37:59 - service.nodes.base_node - INFO - ⏱️ Light 노드 실행 시작
2025-09-28 04:37:59 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Raw-Response': 'true'}, 'files': None, 'idempotency_key': 'stainless-python-retry-1272d73f-5f5b-438e-8f02-1d417dfa8b9a', 'json_data': {'messages': [{'content': '컴퓨터공학과 과목 추천해주세요', 'role': 'user'}], 'model': 'gpt-4o', 'max_completion_tokens': 4000, 'stream': False, 'temperature': 0.0}}
2025-09-28 04:37:59 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - send_request_body.complete
2025-09-28 04:37:59 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-09-28 04:38:05 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 27 Sep 2025 19:38:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'jeonbuk-national-university'), (b'openai-processing-ms', b'5451'), (b'openai-project', b'proj_GsEDOgdDSI76JalmDfnt7uXv'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5478'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'30000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'29999987'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'0s'), (b'x-request-id', b'req_9ed8f40391c74400828868cc5cf3c76d'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'985d75747c0a03cc-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-09-28 04:38:05 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-09-28 04:38:05 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-09-28 04:38:05 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-09-28 04:38:05 - httpcore.http11 - DEBUG - response_closed.started
2025-09-28 04:38:05 - httpcore.http11 - DEBUG - response_closed.complete
2025-09-28 04:38:05 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Sat, 27 Sep 2025 19:38:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'jeonbuk-national-university', 'openai-processing-ms': '5451', 'openai-project': 'proj_GsEDOgdDSI76JalmDfnt7uXv', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '5478', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '30000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '29999987', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '0s', 'x-request-id': 'req_9ed8f40391c74400828868cc5cf3c76d', 'x-openai-proxy-wasm': 'v0.1', 'cf-cache-status': 'DYNAMIC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '985d75747c0a03cc-ICN', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-09-28 04:38:05 - openai._base_client - DEBUG - request_id: req_9ed8f40391c74400828868cc5cf3c76d
2025-09-28 04:38:05 - service.nodes.base_node - INFO - ✅ Light 노드 완료 (5.68초)
2025-09-28 04:38:05 - service.nodes.base_node - INFO - ⏱️ 합성 노드 실행 시작
2025-09-28 04:38:05 - service.nodes.synthesis_nodes - INFO - 🔍 [DEBUG] 슬롯 내용: {}
2025-09-28 04:38:05 - service.nodes.synthesis_nodes - INFO - 📊 [DEBUG] 총 0개 결과 수집됨
2025-09-28 04:38:05 - service.nodes.synthesis_nodes - INFO - ✅ 합성 완료
2025-09-28 04:38:05 - service.nodes.base_node - INFO - ✅ 합성 노드 완료 (0.00초)
2025-09-28 04:38:05 - service.nodes.base_node - INFO - ⏱️ Finalize 노드 실행 시작
2025-09-28 04:38:05 - service.nodes.utility_nodes - INFO - ✅ 처리 완료
2025-09-28 04:38:05 - service.nodes.base_node - INFO - ✅ Finalize 노드 완료 (0.00초)
